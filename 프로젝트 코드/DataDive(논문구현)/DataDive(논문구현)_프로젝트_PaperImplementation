{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ndb796/Deep-Learning-Paper-Review-and-Practice/blob/master/code_practices/Attention_is_All_You_Need_Tutorial_(German_English).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rgnZOimXdN2V"
      },
      "source": [
        "#### **Attention is All You Need (NIPS 2017)** 실습\n",
        "* 본 코드는 기본적으로 **Transformer** 논문의 내용을 최대한 따릅니다.\n",
        "    * 본 논문은 **딥러닝 기반의 자연어 처리** 기법의 기본적인 구성을 이해하고 공부하는 데에 도움을 줍니다.\n",
        "    * 2020년 기준 가장 뛰어난 번역 모델들은 본 논문에서 제안한 **Transformer 기반의 아키텍처**를 따르고 있습니다.\n",
        "* 코드 실행 전에 **[런타임]** → **[런타임 유형 변경]** → 유형을 **GPU**로 설정합니다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rPTu1gCK1YXd"
      },
      "source": [
        "#### <b>BLEU Score 계산을 위한 라이브러리 업데이트</b>\n",
        "\n",
        "* <b>[Restart Runtime]</b> 버튼을 눌러 런타임을 재시작할 필요가 있습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7gjy4bZ1aXc",
        "outputId": "58e58d64-eed1-49b2-fb3f-cf8de08a9356"
      },
      "source": [
        "!pip install torchtext==0.6.0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting torchtext==0.6.0\n",
            "  Downloading torchtext-0.6.0-py3-none-any.whl (64 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.2/64.2 kB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (4.65.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (2.27.1)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (2.0.1+cu118)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (1.22.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (1.16.0)\n",
            "Collecting sentencepiece (from torchtext==0.6.0)\n",
            "  Downloading sentencepiece-0.1.99-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m44.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (3.4)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.12.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (4.5.0)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (1.11.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.1.2)\n",
            "Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (2.0.0)\n",
            "Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->torchtext==0.6.0) (3.25.2)\n",
            "Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->torchtext==0.6.0) (16.0.5)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->torchtext==0.6.0) (2.1.2)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->torchtext==0.6.0) (1.3.0)\n",
            "Installing collected packages: sentencepiece, torchtext\n",
            "  Attempting uninstall: torchtext\n",
            "    Found existing installation: torchtext 0.15.2\n",
            "    Uninstalling torchtext-0.15.2:\n",
            "      Successfully uninstalled torchtext-0.15.2\n",
            "Successfully installed sentencepiece-0.1.99 torchtext-0.6.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_V6NaGYTd62g"
      },
      "source": [
        "#### **데이터 전처리(Preprocessing)**\n",
        "\n",
        "* **spaCy 라이브러리**: 문장의 토큰화(tokenization), 태깅(tagging) 등의 전처리 기능을 위한 라이브러리\n",
        "  * 영어(Engilsh)와 독일어(Deutsch) 전처리 모듈 설치"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tbQzI6V1a2m_"
      },
      "source": [
        "%%capture\n",
        "# 출력을 저장했다가 계속 보여주는 거?\n",
        "\n",
        "\n",
        "!python -m spacy download en\n",
        "!python -m spacy download de"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UfOdc9FSd7xt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "97bfd65e-5eed-4517-a2c5-89262eef0250"
      },
      "source": [
        "import spacy # 스페이씨\n",
        "\n",
        "spacy_en = spacy.load('en_core_web_sm') # 영어 토큰화(tokenization)\n",
        "spacy_de = spacy.load('de_core_news_sm') # 독일어 토큰화(tokenization)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<spacy.lang.en.English at 0x7f82dc4131c0>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eet4iWy_d8s7",
        "outputId": "6adcbf81-f7f5-4539-e0b4-954b3a2211f4"
      },
      "source": [
        "# 간단히 토큰화(tokenization) 기능 써보기\n",
        "tokenized = spacy_en.tokenizer(\"I am a graduate student.\")\n",
        "\n",
        "for i, token in enumerate(tokenized):\n",
        "    print(f\"인덱스 {i}: {token.text}\")\n",
        "    print(token) # 이렇게 실행해도 되는데 왜 굳이 .text를 쓰는 걸까?"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "인덱스 0: I\n",
            "I\n",
            "101\n",
            "인덱스 1: am\n",
            "am\n",
            "4370460163704169311\n",
            "인덱스 2: a\n",
            "a\n",
            "11123243248953317070\n",
            "인덱스 3: graduate\n",
            "graduate\n",
            "13110060611322374290\n",
            "인덱스 4: student\n",
            "student\n",
            "13110060611322374290\n",
            "인덱스 5: .\n",
            ".\n",
            "12646065887601541794\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iqhzmLvjeFZE"
      },
      "source": [
        "* 영어(English) 및 독일어(Deutsch) **토큰화 함수** 정의"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "USWSV869d-s7"
      },
      "source": [
        "# 독일어(Deutsch) 문장을 토큰화 하는 함수 (순서를 뒤집지 않음)\n",
        "def tokenize_de(text):\n",
        "    return [token.text for token in spacy_de.tokenizer(text)]\n",
        "\n",
        "# 영어(English) 문장을 토큰화 하는 함수\n",
        "def tokenize_en(text):\n",
        "    return [token.text for token in spacy_en.tokenizer(text)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZYi1dM7-eH0N"
      },
      "source": [
        "* **필드(field)** 라이브러리를 이용해 데이터셋에 대한 구체적인 전처리 내용을 명시합니다.\n",
        "* Seq2Seq 모델과는 다르게 <b>batch_first 속성의 값을 True로 설정</b>합니다.\n",
        "* 번역 목표\n",
        "    * 소스(SRC): 독일어\n",
        "    * 목표(TRG): 영어"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r_dSDRtReGnU"
      },
      "source": [
        "from torchtext.data import Field, BucketIterator\n",
        "\n",
        "SRC = Field(tokenize=tokenize_de, init_token=\"<sos>\", eos_token=\"<eos>\", lower=True, batch_first=True)      # init_token=\"<sos>\" : 문장의 시작은 <sos> / <eos>\n",
        "TRG = Field(tokenize=tokenize_en, init_token=\"<sos>\", eos_token=\"<eos>\", lower=True, batch_first=True)      # lower=True : 모든 단어 소문자로 바꿔주는 게 일반적\n",
        "                                                                                                            # batch_first=True : Transformer에 입력을 넣을 때는 Tensor의 차원에서 시퀀스보다는 배치가 먼저 오도록 만드는 경우가 다수라서"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RX0O1oKQeY2y"
      },
      "source": [
        "* 대표적인 영어-독어 번역 데이터셋인 **Multi30k**를 불러옵니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0J6QuUf5eWfc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4706f80-7b12-4155-9209-2dc9bed051af"
      },
      "source": [
        "from torchtext.datasets import Multi30k\n",
        "\n",
        "train_dataset, valid_dataset, test_dataset = Multi30k.splits(exts=(\".de\", \".en\"), fields=(SRC, TRG))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "downloading training.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "training.tar.gz: 100%|██████████| 1.21M/1.21M [00:01<00:00, 944kB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "downloading validation.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "validation.tar.gz: 100%|██████████| 46.3k/46.3k [00:00<00:00, 233kB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "downloading mmt_task1_test2016.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "mmt_task1_test2016.tar.gz: 100%|██████████| 66.2k/66.2k [00:00<00:00, 222kB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KQ-Lhpp0ecOi",
        "outputId": "2e0fcc44-ac44-4419-c4b5-f96541b86456"
      },
      "source": [
        "print(f\"학습 데이터셋(training dataset) 크기: {len(train_dataset.examples)}개\")\n",
        "print(f\"평가 데이터셋(validation dataset) 크기: {len(valid_dataset.examples)}개\")\n",
        "print(f\"테스트 데이터셋(testing dataset) 크기: {len(test_dataset.examples)}개\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습 데이터셋(training dataset) 크기: 29000개\n",
            "평가 데이터셋(validation dataset) 크기: 1014개\n",
            "테스트 데이터셋(testing dataset) 크기: 1000개\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VYghX0SueecT",
        "outputId": "c1b60dce-7af9-4e74-eb59-8f56413440c0"
      },
      "source": [
        "# 학습 데이터 중 하나를 선택해 출력\n",
        "print(vars(train_dataset.examples[30])['src'])\n",
        "print(vars(train_dataset.examples[30])['trg'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['ein', 'mann', ',', 'der', 'mit', 'einer', 'tasse', 'kaffee', 'an', 'einem', 'urinal', 'steht', '.']\n",
            "['a', 'man', 'standing', 'at', 'a', 'urinal', 'with', 'a', 'coffee', 'cup', '.']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ekQys1HpegX_"
      },
      "source": [
        "* **필드(field)** 객체의 **build_vocab** 메서드를 이용해 영어와 독어의 단어 사전을 생성합니다.\n",
        "  * **최소 2번 이상** 등장한 단어만을 선택합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X4A5ksMyefKy",
        "outputId": "38e6c8fb-39ca-4197-ab64-0066488c9fba"
      },
      "source": [
        "SRC.build_vocab(train_dataset, min_freq=2)\n",
        "TRG.build_vocab(train_dataset, min_freq=2)\n",
        "\n",
        "print(f\"len(SRC): {len(SRC.vocab)}\") # 독어의 vocab size 출력\n",
        "print(f\"len(TRG): {len(TRG.vocab)}\") # 영어의 vocab size 출력"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "len(SRC): 7853\n",
            "len(TRG): 5893\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xfo21o_5ehmK",
        "outputId": "8aa41271-9ddc-4457-8873-e4bcb36af200"
      },
      "source": [
        "print(TRG.vocab.stoi[\"abcabc\"]) # 없는 단어: 0                        # string to i 함수를 호출 -> 각각의 단어가 어떤 인덱스에 해당하는지 출력\n",
        "print(TRG.vocab.stoi[TRG.pad_token]) # 패딩(padding): 1\n",
        "print(TRG.vocab.stoi[\"<sos>\"]) # <sos>: 2\n",
        "print(TRG.vocab.stoi[\"<eos>\"]) # <eos>: 3\n",
        "print(TRG.vocab.stoi[\"hello\"]) # 존재하는 단어\n",
        "print(TRG.vocab.stoi[\"world\"]) # 존재하는 단어"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4112\n",
            "1752\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rHlAcqrGekNm"
      },
      "source": [
        "* 한 문장에 포함된 단어가 순서대로 나열된 상태로 네트워크에 입력되어야 합니다.\n",
        "    * 따라서 하나의 배치에 포함된 문장들이 가지는 단어의 개수가 유사하도록 만들면 좋습니다.\n",
        "    * 이를 위해 BucketIterator를 사용합니다.\n",
        "    * **배치 크기(batch size)**: 128"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DSJQUC0meifi"
      },
      "source": [
        "import torch\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "BATCH_SIZE = 128                                                              # 길이가 짤은 문장들에 대해서 padding token이 최대한 적게 -> 학습을 위해 네트워크에 들어가는 차원의 크기 감소 가능\n",
        "\n",
        "# 일반적인 데이터 로더(data loader)의 iterator와 유사하게 사용 가능\n",
        "train_iterator, valid_iterator, test_iterator = BucketIterator.splits(\n",
        "    (train_dataset, valid_dataset, test_dataset),\n",
        "    batch_size=BATCH_SIZE,\n",
        "    device=device)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4eh7BABetH1",
        "outputId": "b4f0d7db-7b64-4aa6-f19e-7ca195e80fea"
      },
      "source": [
        "for i, batch in enumerate(train_iterator):\n",
        "    src = batch.src\n",
        "    trg = batch.trg\n",
        "\n",
        "    print(f\"첫 번째 배치 크기: {src.shape}\")\n",
        "\n",
        "    # 현재 배치에 있는 하나의 문장에 포함된 정보 출력\n",
        "    for i in range(src.shape[1]):\n",
        "        print(f\"인덱스 {i}: {src[0][i].item()}\") # 여기에서는 [Seq_num, Seq_len]\n",
        "\n",
        "    # 첫 번째 배치만 확인\n",
        "    break"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "첫 번째 배치 크기: torch.Size([128, 30])\n",
            "인덱스 0: 2\n",
            "인덱스 1: 5\n",
            "인덱스 2: 5726\n",
            "인덱스 3: 32\n",
            "인덱스 4: 901\n",
            "인덱스 5: 39\n",
            "인덱스 6: 63\n",
            "인덱스 7: 22\n",
            "인덱스 8: 23\n",
            "인덱스 9: 284\n",
            "인덱스 10: 4\n",
            "인덱스 11: 3\n",
            "인덱스 12: 1\n",
            "인덱스 13: 1\n",
            "인덱스 14: 1\n",
            "인덱스 15: 1\n",
            "인덱스 16: 1\n",
            "인덱스 17: 1\n",
            "인덱스 18: 1\n",
            "인덱스 19: 1\n",
            "인덱스 20: 1\n",
            "인덱스 21: 1\n",
            "인덱스 22: 1\n",
            "인덱스 23: 1\n",
            "인덱스 24: 1\n",
            "인덱스 25: 1\n",
            "인덱스 26: 1\n",
            "인덱스 27: 1\n",
            "인덱스 28: 1\n",
            "인덱스 29: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2-HT1C6kfQG6"
      },
      "source": [
        "#### **Multi Head Attention 아키텍처**\n",
        "\n",
        "* 어텐션(attention)은 <b>세 가지 요소</b>를 입력으로 받습니다.\n",
        "    * <b>쿼리(queries)</b>\n",
        "    * <b>키(keys)</b>\n",
        "    * <b>값(values)</b>\n",
        "    * 현재 구현에서는 Query, Key, Value의 차원이 모두 같습니다.\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **n_heads**: 헤드(head)의 개수 = scaled dot-product attention의 개수\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ohBIfgOJiL0a"
      },
      "source": [
        "# Q, K, V 차원은 모두 (d_model / h)로 같다\n",
        "import torch.nn as nn\n",
        "\n",
        "class MultiHeadAttentionLayer(nn.Module):\n",
        "    def __init__(self, hidden_dim, n_heads, dropout_ratio, device):\n",
        "        super().__init__()\n",
        "\n",
        "        assert hidden_dim % n_heads == 0\n",
        "\n",
        "        self.hidden_dim = hidden_dim # 임베딩 차원\n",
        "        self.n_heads = n_heads # 헤드(head)의 개수: 서로 다른 어텐션(attention) 컨셉의 수\n",
        "        self.head_dim = hidden_dim // n_heads # 각 헤드(head)에서의 임베딩 차원\n",
        "\n",
        "        self.fc_q = nn.Linear(hidden_dim, hidden_dim) # Query 값에 적용될 FC 레이어     # 우리가 앞서 공부했을 때는 각각의 QKV가 hidden_dim -> key의 차원으로 바뀌어진다고 했었는데,\n",
        "        self.fc_k = nn.Linear(hidden_dim, hidden_dim) # Key 값에 적용될 FC 레이어       # 실제로 구현할 때는 그냥 hidden_dim -> hidden_dim으로 매핑 후 결과 dim을 h개로 쪼개서 사용할 수 O\n",
        "        self.fc_v = nn.Linear(hidden_dim, hidden_dim) # Value 값에 적용될 FC 레이어\n",
        "\n",
        "        self.fc_o = nn.Linear(hidden_dim, hidden_dim)\n",
        "\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "        self.scale = torch.sqrt(torch.FloatTensor([self.head_dim])).to(device)      # 이후 Softmax에 넣어주기 위함\n",
        "\n",
        "    def forward(self, query, key, value, mask = None):\n",
        "\n",
        "        batch_size = query.shape[0]\n",
        "\n",
        "        # query: [batch_size, query_len, hidden_dim]\n",
        "        # key: [batch_size, key_len, hidden_dim]\n",
        "        # value: [batch_size, value_len, hidden_dim]\n",
        "\n",
        "        Q = self.fc_q(query)\n",
        "        K = self.fc_k(key)\n",
        "        V = self.fc_v(value)\n",
        "\n",
        "        # Q: [batch_size, query_len, hidden_dim]\n",
        "        # K: [batch_size, key_len, hidden_dim]\n",
        "        # V: [batch_size, value_len, hidden_dim]\n",
        "\n",
        "        # hidden_dim → n_heads X head_dim 형태로 변형\n",
        "        # n_heads(h)개의 서로 다른 어텐션(attention) 컨셉을 학습하도록 유도\n",
        "        Q = Q.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)    # QKV를 h개로 나눠서 쓸 수 있음을 보여주는 파트, 즉 h개 각각마다 head_dim만큼의 크기 차원을 갖게\n",
        "        K = K.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)\n",
        "        V = V.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)\n",
        "\n",
        "        # Q: [batch_size, n_heads, query_len, head_dim]\n",
        "        # K: [batch_size, n_heads, key_len, head_dim]\n",
        "        # V: [batch_size, n_heads, value_len, head_dim]\n",
        "\n",
        "        # Attention Energy 계산\n",
        "        energy = torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale                    # 각각의 head마다 (Q * K) / scale\n",
        "\n",
        "        # energy: [batch_size, n_heads, query_len, key_len]\n",
        "\n",
        "        # 마스크(mask)를 사용하는 경우\n",
        "        if mask is not None:\n",
        "            # 마스크(mask) 값이 0인 부분을 -1e10으로 채우기\n",
        "            energy = energy.masked_fill(mask==0, -1e10)\n",
        "\n",
        "        # 어텐션(attention) 스코어 계산: 각 단어에 대한 확률 값\n",
        "        attention = torch.softmax(energy, dim=-1)\n",
        "\n",
        "        # attention: [batch_size, n_heads, query_len, key_len]\n",
        "\n",
        "        # 여기에서 Scaled Dot-Product Attention을 계산\n",
        "        x = torch.matmul(self.dropout(attention), V)\n",
        "\n",
        "        # x: [batch_size, n_heads, query_len, head_dim]\n",
        "\n",
        "        x = x.permute(0, 2, 1, 3).contiguous()\n",
        "\n",
        "        # x: [batch_size, query_len, n_heads, head_dim]\n",
        "\n",
        "        x = x.view(batch_size, -1, self.hidden_dim)                                       # 다시 일자로 쭉 늘어뜨려서 concat을 수행한 것과 같은 결과\n",
        "\n",
        "        # x: [batch_size, query_len, hidden_dim]\n",
        "\n",
        "        x = self.fc_o(x)\n",
        "\n",
        "        # x: [batch_size, query_len, hidden_dim]\n",
        "\n",
        "        return x, attention                           # 나중에 시각화를 위해 attention 출력"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D4-71fGFUQ0P"
      },
      "source": [
        "#### **Position-wise Feedforward 아키텍처**\n",
        "\n",
        "* 입력과 출력의 차원이 동일합니다.\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **pf_dim**: Feedforward 레이어에서의 내부 임베딩 차원\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yBXPWolrUeYj"
      },
      "source": [
        "class PositionwiseFeedforwardLayer(nn.Module):\n",
        "    def __init__(self, hidden_dim, pf_dim, dropout_ratio):\n",
        "        super().__init__()\n",
        "\n",
        "        self.fc_1 = nn.Linear(hidden_dim, pf_dim)                                 # 1. hidden_dim만큼의 차원이 들어왔을 때,\n",
        "        self.fc_2 = nn.Linear(pf_dim, hidden_dim)                                 # 2. hidden_dim으로 그대로 내보낸다는 특징\n",
        "\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        # x: [batch_size, seq_len, hidden_dim]\n",
        "\n",
        "        x = self.dropout(torch.relu(self.fc_1(x)))\n",
        "\n",
        "        # x: [batch_size, seq_len, pf_dim]\n",
        "\n",
        "        x = self.fc_2(x)\n",
        "\n",
        "        # x: [batch_size, seq_len, hidden_dim]\n",
        "\n",
        "        return x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "evmxGJCTTF1x"
      },
      "source": [
        "#### **인코더(Encoder) 레이어 아키텍처**\n",
        "\n",
        "* 하나의 인코더 레이어에 대해 정의합니다.\n",
        "    * 입력과 출력의 차원이 같습니다.\n",
        "    * 이러한 특징을 이용해 트랜스포머의 인코더는 인코더 레이어를 여러 번 중첩해 사용합니다.\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **n_heads**: 헤드(head)의 개수 = scaled dot-product attention의 개수\n",
        "    * **pf_dim**: Feedforward 레이어에서의 내부 임베딩 차원\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율\n",
        "* &lt;pad&gt; 토큰에 대하여 마스크(mask) 값을 0으로 설정합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uTPD0jEbe1bx"
      },
      "source": [
        "# 위에서 정의한 Multi-head Attention & Feed Forward Layer에 대한 클래스를 이용 ->  Encoder Layer 아키텍쳐 정의 가능\n",
        "\n",
        "class EncoderLayer(nn.Module):\n",
        "    def __init__(self, hidden_dim, n_heads, pf_dim, dropout_ratio, device):\n",
        "        super().__init__()\n",
        "\n",
        "        # 아래 4개의 레이어가 하나의 Encoder 레이어를 구성\n",
        "        self.self_attn_layer_norm = nn.LayerNorm(hidden_dim)\n",
        "        self.ff_layer_norm = nn.LayerNorm(hidden_dim)\n",
        "        self.self_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, dropout_ratio, device)\n",
        "        self.positionwise_feedforward = PositionwiseFeedforwardLayer(hidden_dim, pf_dim, dropout_ratio)\n",
        "        # 여기까지가 4개의 레이어\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "    # 하나의 임베딩이 복제되어 Query, Key, Value로 입력되는 방식\n",
        "    def forward(self, src, src_mask):\n",
        "\n",
        "        # src: [batch_size, src_len, hidden_dim]\n",
        "        # src_mask: [batch_size, src_len]\n",
        "\n",
        "        # self attention\n",
        "        # 필요한 경우 마스크(mask) 행렬을 이용하여 어텐션(attention)할 단어를 조절 가능\n",
        "        _src, _ = self.self_attention(src, src, src, src_mask)                    # src가 동일하게 Q, K, V / src_mask를 통해서 mask를 씌울 수도 있다\n",
        "\n",
        "        # dropout, residual connection and layer norm\n",
        "        src = self.self_attn_layer_norm(src + self.dropout(_src))\n",
        "\n",
        "        # src: [batch_size, src_len, hidden_dim]\n",
        "\n",
        "        # position-wise feedforward\n",
        "        _src = self.positionwise_feedforward(src)\n",
        "\n",
        "        # dropout, residual and layer norm\n",
        "        src = self.ff_layer_norm(src + self.dropout(_src))\n",
        "\n",
        "        # src: [batch_size, src_len, hidden_dim]\n",
        "\n",
        "        return src"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6RmMSlFXVkxN"
      },
      "source": [
        "#### **인코더(Encoder) 아키텍처**\n",
        "\n",
        "* 전체 인코더 아키텍처를 정의합니다.\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **input_dim**: 하나의 단어에 대한 원 핫 인코딩 차원\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **n_layers**: 내부적으로 사용할 인코더 레이어의 개수\n",
        "    * **n_heads**: 헤드(head)의 개수 = scaled dot-product attention의 개수\n",
        "    * **pf_dim**: Feedforward 레이어에서의 내부 임베딩 차원\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율\n",
        "    * **max_length**: 문장 내 최대 단어 개수\n",
        "* 원본 논문과는 다르게 <b>위치 임베딩(positional embedding)을 학습</b>하는 형태로 구현합니다.\n",
        "    * BERT와 같은 모던 트랜스포머 아키텍처에서 사용되는 방식입니다.\n",
        "* &lt;pad&gt; 토큰에 대하여 마스크(mask) 값을 0으로 설정합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LAd_op0bVhn-"
      },
      "source": [
        "# 앞에서 정의한 Encoder Layer를 n_layer만큼 중첩해서 구성\n",
        "class Encoder(nn.Module):\n",
        "    def __init__(self, input_dim, hidden_dim, n_layers, n_heads, pf_dim, dropout_ratio, device, max_length=100):\n",
        "        super().__init__()\n",
        "\n",
        "        self.device = device\n",
        "\n",
        "        self.tok_embedding = nn.Embedding(input_dim, hidden_dim)                   # input_dim으로 들어왔을 때, hidden_dim(임베딩 차원)으로 바꿔 주고\n",
        "        self.pos_embedding = nn.Embedding(max_length, hidden_dim)                  # pe를 직접 학습하는 형태로\n",
        "\n",
        "        self.layers = nn.ModuleList([EncoderLayer(hidden_dim, n_heads, pf_dim, dropout_ratio, device) for _ in range(n_layers)]) # ModuleList를 통해서 n_layer만큼 반복할 수 있도록 해준다.\n",
        "\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "        self.scale = torch.sqrt(torch.FloatTensor([hidden_dim])).to(device)\n",
        "\n",
        "    def forward(self, src, src_mask):\n",
        "\n",
        "        # src: [batch_size, src_len]\n",
        "        # src_mask: [batch_size, src_len]\n",
        "\n",
        "        batch_size = src.shape[0]             # batch_size = 문장의 개수\n",
        "        src_len = src.shape[1]                # src_len = 각 문장 중에서 단어의 개수가 가장 많은 문장의 단어 개수\n",
        "\n",
        "        pos = torch.arange(0, src_len).unsqueeze(0).repeat(batch_size, 1).to(self.device) # 문장마다 들어갈 수 있도록 repeat\n",
        "\n",
        "        # pos: [batch_size, src_len]\n",
        "\n",
        "        # 소스 문장의 임베딩과 위치 임베딩을 더한 것을 사용\n",
        "        src = self.dropout((self.tok_embedding(src) * self.scale) + self.pos_embedding(pos))\n",
        "\n",
        "        # src: [batch_size, src_len, hidden_dim]\n",
        "\n",
        "        # 모든 인코더 레이어를 차례대로 거치면서 순전파(forward) 수행\n",
        "        for layer in self.layers:\n",
        "            src = layer(src, src_mask)\n",
        "\n",
        "        # src: [batch_size, src_len, hidden_dim]\n",
        "\n",
        "        return src # 마지막 레이어의 출력을 반환"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NNP2S7g_Xeal"
      },
      "source": [
        "#### **디코더(Decoder) 레이어 아키텍처**\n",
        "\n",
        "* 하나의 디코더 레이어에 대해 정의합니다.\n",
        "    * 입력과 출력의 차원이 같습니다.\n",
        "    * 이러한 특징을 이용해 트랜스포머의 디코더는 디코더 레이어를 여러 번 중첩해 사용합니다.\n",
        "    * 디코더 레이어에서는 두 개의 Multi-Head Attention 레이어가 사용됩니다.\n",
        "      1. Self Attention\n",
        "      2. Encoder-Decoder Attention\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **n_heads**: 헤드(head)의 개수 = scaled dot-product attention의 개수\n",
        "    * **pf_dim**: Feedforward 레이어에서의 내부 임베딩 차원\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율\n",
        "* 소스 문장의 &lt;pad&gt; 토큰에 대하여 마스크(mask) 값을 0으로 설정합니다.\n",
        "* 타겟 문장에서 각 단어는 다음 단어가 무엇인지 알 수 없도록(이전 단어만 보도록) 만들기 위해 마스크를 사용합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0jn4VCWdXhK5"
      },
      "source": [
        "class DecoderLayer(nn.Module):\n",
        "    def __init__(self, hidden_dim, n_heads, pf_dim, dropout_ratio, device):\n",
        "        super().__init__()\n",
        "\n",
        "        # 6개의 Layer\n",
        "        self.self_attn_layer_norm = nn.LayerNorm(hidden_dim)\n",
        "        self.enc_attn_layer_norm = nn.LayerNorm(hidden_dim)\n",
        "        self.ff_layer_norm = nn.LayerNorm(hidden_dim)\n",
        "        self.self_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, dropout_ratio, device)\n",
        "        self.encoder_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, dropout_ratio, device)\n",
        "        self.positionwise_feedforward = PositionwiseFeedforwardLayer(hidden_dim, pf_dim, dropout_ratio)\n",
        "\n",
        "\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "    # 인코더의 출력 값(enc_src)을 어텐션(attention)하는 구조\n",
        "    def forward(self, trg, enc_src, trg_mask, src_mask):\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "        # enc_src: [batch_size, src_len, hidden_dim]\n",
        "        # trg_mask: [batch_size, trg_len]\n",
        "        # src_mask: [batch_size, src_len]\n",
        "\n",
        "        # self attention\n",
        "        # 자기 자신에 대하여 어텐션(attention)\n",
        "        _trg, _ = self.self_attention(trg, trg, trg, trg_mask)\n",
        "\n",
        "        # dropout, residual connection and layer norm\n",
        "        trg = self.self_attn_layer_norm(trg + self.dropout(_trg))\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "\n",
        "        # encoder attention\n",
        "        # 디코더의 쿼리(Query)를 이용해 인코더를 어텐션(attention)\n",
        "        _trg, attention = self.encoder_attention(trg, enc_src, enc_src, src_mask)\n",
        "\n",
        "        # dropout, residual connection and layer norm\n",
        "        trg = self.enc_attn_layer_norm(trg + self.dropout(_trg))\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "\n",
        "        # positionwise feedforward\n",
        "        _trg = self.positionwise_feedforward(trg)\n",
        "\n",
        "        # dropout, residual and layer norm\n",
        "        trg = self.ff_layer_norm(trg + self.dropout(_trg))\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "        # attention: [batch_size, n_heads, trg_len, src_len]\n",
        "\n",
        "        return trg, attention"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hK8AWlrcWWRc"
      },
      "source": [
        "#### **디코더(Decoder) 아키텍처**\n",
        "\n",
        "* 전체 디코더 아키텍처를 정의합니다.\n",
        "* 하이퍼 파라미터(hyperparameter)\n",
        "    * **output_dim**: 하나의 단어에 대한 원 핫 인코딩 차원\n",
        "    * **hidden_dim**: 하나의 단어에 대한 임베딩 차원\n",
        "    * **n_layers**: 내부적으로 사용할 인코더 레이어의 개수\n",
        "    * **n_heads**: 헤드(head)의 개수 = scaled dot-product attention의 개수\n",
        "    * **pf_dim**: Feedforward 레이어에서의 내부 임베딩 차원\n",
        "    * **dropout_ratio**: 드롭아웃(dropout) 비율\n",
        "    * **max_length**: 문장 내 최대 단어 개수\n",
        "* 원본 논문과는 다르게 <b>위치 임베딩(positional embedding)을 학습</b>하는 형태로 구현합니다.\n",
        "    * BERT와 같은 모던 트랜스포머 아키텍처에서 사용되는 방식입니다.\n",
        "* Seq2Seq과는 마찬가지로 실제로 추론(inference) 시기에서는 디코더를 반복적으로 넣을 필요가 있습니다.\n",
        "    * 학습(training) 시기에서는 한 번에 출력 문장을 구해 학습할 수 있습니다.\n",
        "* 소스 문장의 &lt;pad&gt; 토큰에 대하여 마스크(mask) 값을 0으로 설정합니다.\n",
        "* 타겟 문장에서 각 단어는 다음 단어가 무엇인지 알 수 없도록(이전 단어만 보도록) 만들기 위해 마스크를 사용합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X64at7IuWQcm"
      },
      "source": [
        "class Decoder(nn.Module):\n",
        "    def __init__(self, output_dim, hidden_dim, n_layers, n_heads, pf_dim, dropout_ratio, device, max_length=100):\n",
        "        super().__init__()\n",
        "\n",
        "        self.device = device\n",
        "\n",
        "        self.tok_embedding = nn.Embedding(output_dim, hidden_dim)\n",
        "        self.pos_embedding = nn.Embedding(max_length, hidden_dim)\n",
        "\n",
        "        self.layers = nn.ModuleList([DecoderLayer(hidden_dim, n_heads, pf_dim, dropout_ratio, device) for _ in range(n_layers)]) # 반복적으로 중첩해서 사용\n",
        "\n",
        "        self.fc_out = nn.Linear(hidden_dim, output_dim)\n",
        "\n",
        "        self.dropout = nn.Dropout(dropout_ratio)\n",
        "\n",
        "        self.scale = torch.sqrt(torch.FloatTensor([hidden_dim])).to(device)\n",
        "\n",
        "    def forward(self, trg, enc_src, trg_mask, src_mask):\n",
        "\n",
        "        # trg: [batch_size, trg_len]\n",
        "        # enc_src: [batch_size, src_len, hidden_dim]\n",
        "        # trg_mask: [batch_size, trg_len]\n",
        "        # src_mask: [batch_size, src_len]\n",
        "\n",
        "        batch_size = trg.shape[0]\n",
        "        trg_len = trg.shape[1]\n",
        "\n",
        "        pos = torch.arange(0, trg_len).unsqueeze(0).repeat(batch_size, 1).to(self.device)\n",
        "\n",
        "        # pos: [batch_size, trg_len]\n",
        "\n",
        "        trg = self.dropout((self.tok_embedding(trg) * self.scale) + self.pos_embedding(pos))\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "\n",
        "        for layer in self.layers:\n",
        "            # 소스 마스크와 타겟 마스크 모두 사용\n",
        "            trg, attention = layer(trg, enc_src, trg_mask, src_mask)\n",
        "\n",
        "        # trg: [batch_size, trg_len, hidden_dim]\n",
        "        # attention: [batch_size, n_heads, trg_len, src_len]\n",
        "\n",
        "        output = self.fc_out(trg)\n",
        "\n",
        "        # output: [batch_size, trg_len, output_dim]\n",
        "\n",
        "        return output, attention"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b50rQACqW3xX"
      },
      "source": [
        "#### **트랜스포머(Transformer) 아키텍처**\n",
        "\n",
        "* 최종적인 전체 트랜스포머(Transformer) 모델을 정의합니다.\n",
        "* 입력이 들어왔을 때 앞서 정의한 인코더와 디코더를 거쳐 출력 문장을 생성합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hBGN8VyvW0Et"
      },
      "source": [
        "class Transformer(nn.Module):\n",
        "    def __init__(self, encoder, decoder, src_pad_idx, trg_pad_idx, device):\n",
        "        super().__init__()\n",
        "\n",
        "        self.encoder = encoder\n",
        "        self.decoder = decoder\n",
        "        self.src_pad_idx = src_pad_idx\n",
        "        self.trg_pad_idx = trg_pad_idx\n",
        "        self.device = device\n",
        "\n",
        "    # 소스 문장의 <pad> 토큰에 대하여 마스크(mask) 값을 0으로 설정\n",
        "    def make_src_mask(self, src):\n",
        "\n",
        "        # src: [batch_size, src_len]\n",
        "\n",
        "        src_mask = (src != self.src_pad_idx).unsqueeze(1).unsqueeze(2)\n",
        "\n",
        "        # src_mask: [batch_size, 1, 1, src_len]\n",
        "\n",
        "        return src_mask\n",
        "\n",
        "    # 타겟 문장에서 각 단어는 다음 단어가 무엇인지 알 수 없도록(이전 단어만 보도록) 만들기 위해 마스크를 사용\n",
        "    def make_trg_mask(self, trg):\n",
        "\n",
        "        # trg: [batch_size, trg_len]\n",
        "\n",
        "        \"\"\" (마스크 예시)\n",
        "        1 0 0 0 0\n",
        "        1 1 0 0 0\n",
        "        1 1 1 0 0\n",
        "        1 1 1 0 0\n",
        "        1 1 1 0 0\n",
        "        \"\"\"\n",
        "        trg_pad_mask = (trg != self.trg_pad_idx).unsqueeze(1).unsqueeze(2)\n",
        "\n",
        "        # trg_pad_mask: [batch_size, 1, 1, trg_len]\n",
        "\n",
        "        trg_len = trg.shape[1]\n",
        "\n",
        "        \"\"\" (마스크 예시)\n",
        "        1 0 0 0 0\n",
        "        1 1 0 0 0\n",
        "        1 1 1 0 0\n",
        "        1 1 1 1 0\n",
        "        1 1 1 1 1\n",
        "        \"\"\"\n",
        "        trg_sub_mask = torch.tril(torch.ones((trg_len, trg_len), device = self.device)).bool()\n",
        "\n",
        "        # trg_sub_mask: [trg_len, trg_len]\n",
        "\n",
        "        trg_mask = trg_pad_mask & trg_sub_mask\n",
        "\n",
        "        # trg_mask: [batch_size, 1, trg_len, trg_len]\n",
        "\n",
        "        return trg_mask\n",
        "\n",
        "    def forward(self, src, trg):\n",
        "\n",
        "        # src: [batch_size, src_len]\n",
        "        # trg: [batch_size, trg_len]\n",
        "\n",
        "        src_mask = self.make_src_mask(src)\n",
        "        trg_mask = self.make_trg_mask(trg)\n",
        "\n",
        "        # src_mask: [batch_size, 1, 1, src_len]\n",
        "        # trg_mask: [batch_size, 1, trg_len, trg_len]\n",
        "\n",
        "        enc_src = self.encoder(src, src_mask)\n",
        "\n",
        "        # enc_src: [batch_size, src_len, hidden_dim]\n",
        "\n",
        "        output, attention = self.decoder(trg, enc_src, trg_mask, src_mask)\n",
        "\n",
        "        # output: [batch_size, trg_len, output_dim]\n",
        "        # attention: [batch_size, n_heads, trg_len, src_len]\n",
        "\n",
        "        return output, attention"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lnBKjEFFqHrV"
      },
      "source": [
        "#### **학습(Training)**\n",
        "\n",
        "* 하이퍼 파라미터 설정 및 모델 초기화"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vJG6xhUaXZ32"
      },
      "source": [
        "INPUT_DIM = len(SRC.vocab)\n",
        "OUTPUT_DIM = len(TRG.vocab)\n",
        "HIDDEN_DIM = 256\n",
        "ENC_LAYERS = 3 # 논문에서 제시하는 것보다 매우 작지만, 충분히 좋은 성능\n",
        "DEC_LAYERS = 3\n",
        "ENC_HEADS = 8\n",
        "DEC_HEADS = 8\n",
        "ENC_PF_DIM = 512\n",
        "DEC_PF_DIM = 512\n",
        "ENC_DROPOUT = 0.1\n",
        "DEC_DROPOUT = 0.1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rVgG8VOYXbIk"
      },
      "source": [
        "SRC_PAD_IDX = SRC.vocab.stoi[SRC.pad_token]\n",
        "TRG_PAD_IDX = TRG.vocab.stoi[TRG.pad_token]\n",
        "\n",
        "# 인코더(encoder)와 디코더(decoder) 객체 선언\n",
        "enc = Encoder(INPUT_DIM, HIDDEN_DIM, ENC_LAYERS, ENC_HEADS, ENC_PF_DIM, ENC_DROPOUT, device)\n",
        "dec = Decoder(OUTPUT_DIM, HIDDEN_DIM, DEC_LAYERS, DEC_HEADS, DEC_PF_DIM, DEC_DROPOUT, device)\n",
        "\n",
        "# Transformer 객체 선언\n",
        "model = Transformer(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device).to(device)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_B1BkZkUqQjo"
      },
      "source": [
        "* **모델 가중치 파라미터 초기화**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnCu5WAyXmes",
        "outputId": "bd67bd1f-cb15-43d8-eaf5-276abcdd638d"
      },
      "source": [
        "def count_parameters(model):\n",
        "    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "\n",
        "print(f'The model has {count_parameters(model):,} trainable parameters')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The model has 9,038,341 trainable parameters\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VEY3bppUXndU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9eac33b2-025a-4128-d313-472b6c0cab86"
      },
      "source": [
        "def initialize_weights(m):\n",
        "    if hasattr(m, 'weight') and m.weight.dim() > 1:\n",
        "        nn.init.xavier_uniform_(m.weight.data)\n",
        "\n",
        "model.apply(initialize_weights)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Transformer(\n",
              "  (encoder): Encoder(\n",
              "    (tok_embedding): Embedding(7853, 256)\n",
              "    (pos_embedding): Embedding(100, 256)\n",
              "    (layers): ModuleList(\n",
              "      (0-2): 3 x EncoderLayer(\n",
              "        (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
              "        (ff_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
              "        (self_attention): MultiHeadAttentionLayer(\n",
              "          (fc_q): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_k): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_v): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_o): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (dropout): Dropout(p=0.1, inplace=False)\n",
              "        )\n",
              "        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n",
              "          (fc_1): Linear(in_features=256, out_features=512, bias=True)\n",
              "          (fc_2): Linear(in_features=512, out_features=256, bias=True)\n",
              "          (dropout): Dropout(p=0.1, inplace=False)\n",
              "        )\n",
              "        (dropout): Dropout(p=0.1, inplace=False)\n",
              "      )\n",
              "    )\n",
              "    (dropout): Dropout(p=0.1, inplace=False)\n",
              "  )\n",
              "  (decoder): Decoder(\n",
              "    (tok_embedding): Embedding(5893, 256)\n",
              "    (pos_embedding): Embedding(100, 256)\n",
              "    (layers): ModuleList(\n",
              "      (0-2): 3 x DecoderLayer(\n",
              "        (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
              "        (enc_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
              "        (ff_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
              "        (self_attention): MultiHeadAttentionLayer(\n",
              "          (fc_q): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_k): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_v): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_o): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (dropout): Dropout(p=0.1, inplace=False)\n",
              "        )\n",
              "        (encoder_attention): MultiHeadAttentionLayer(\n",
              "          (fc_q): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_k): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_v): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (fc_o): Linear(in_features=256, out_features=256, bias=True)\n",
              "          (dropout): Dropout(p=0.1, inplace=False)\n",
              "        )\n",
              "        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n",
              "          (fc_1): Linear(in_features=256, out_features=512, bias=True)\n",
              "          (fc_2): Linear(in_features=512, out_features=256, bias=True)\n",
              "          (dropout): Dropout(p=0.1, inplace=False)\n",
              "        )\n",
              "        (dropout): Dropout(p=0.1, inplace=False)\n",
              "      )\n",
              "    )\n",
              "    (fc_out): Linear(in_features=256, out_features=5893, bias=True)\n",
              "    (dropout): Dropout(p=0.1, inplace=False)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WsdTndLDqWQf"
      },
      "source": [
        "* 학습 및 평가 함수 정의\n",
        "    * 기본적인 Seq2Seq 모델과 거의 유사하게 작성할 수 있습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m6-92JSlXrwM"
      },
      "source": [
        "import torch.optim as optim\n",
        "\n",
        "# Adam optimizer로 학습 최적화\n",
        "LEARNING_RATE = 0.0005\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
        "\n",
        "# 뒷 부분의 패딩(padding)에 대해서는 값 무시\n",
        "criterion = nn.CrossEntropyLoss(ignore_index = TRG_PAD_IDX)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tcIltwlRXssU"
      },
      "source": [
        "# 모델 학습(train) 함수\n",
        "def train(model, iterator, optimizer, criterion, clip):\n",
        "    model.train() # 학습 모드\n",
        "    epoch_loss = 0\n",
        "\n",
        "    # 전체 학습 데이터를 확인하며\n",
        "    for i, batch in enumerate(iterator):\n",
        "        src = batch.src\n",
        "        trg = batch.trg\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # 출력 단어의 마지막 인덱스(<eos>)는 제외\n",
        "        # 입력을 할 때는 <sos>부터 시작하도록 처리\n",
        "        output, _ = model(src, trg[:,:-1])\n",
        "\n",
        "        # output: [배치 크기, trg_len - 1, output_dim]\n",
        "        # trg: [배치 크기, trg_len]\n",
        "\n",
        "        output_dim = output.shape[-1]\n",
        "\n",
        "        output = output.contiguous().view(-1, output_dim)\n",
        "        # 출력 단어의 인덱스 0(<sos>)은 제외\n",
        "        trg = trg[:,1:].contiguous().view(-1)\n",
        "\n",
        "        # output: [배치 크기 * trg_len - 1, output_dim]\n",
        "        # trg: [배치 크기 * trg len - 1]\n",
        "\n",
        "        # 모델의 출력 결과와 타겟 문장을 비교하여 손실 계산\n",
        "        loss = criterion(output, trg)\n",
        "        loss.backward() # 기울기(gradient) 계산\n",
        "\n",
        "        # 기울기(gradient) clipping 진행\n",
        "        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n",
        "\n",
        "        # 파라미터 업데이트\n",
        "        optimizer.step()\n",
        "\n",
        "        # 전체 손실 값 계산\n",
        "        epoch_loss += loss.item()\n",
        "\n",
        "    return epoch_loss / len(iterator)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "69a5vBggXt4M"
      },
      "source": [
        "# 모델 평가(evaluate) 함수\n",
        "def evaluate(model, iterator, criterion):\n",
        "    model.eval() # 평가 모드\n",
        "    epoch_loss = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        # 전체 평가 데이터를 확인하며\n",
        "        for i, batch in enumerate(iterator):\n",
        "            src = batch.src\n",
        "            trg = batch.trg\n",
        "\n",
        "            # 출력 단어의 마지막 인덱스(<eos>)는 제외\n",
        "            # 입력을 할 때는 <sos>부터 시작하도록 처리\n",
        "            output, _ = model(src, trg[:,:-1])\n",
        "\n",
        "            # output: [배치 크기, trg_len - 1, output_dim]\n",
        "            # trg: [배치 크기, trg_len]\n",
        "\n",
        "            output_dim = output.shape[-1]\n",
        "\n",
        "            output = output.contiguous().view(-1, output_dim)\n",
        "            # 출력 단어의 인덱스 0(<sos>)은 제외\n",
        "            trg = trg[:,1:].contiguous().view(-1)\n",
        "\n",
        "            # output: [배치 크기 * trg_len - 1, output_dim]\n",
        "            # trg: [배치 크기 * trg len - 1]\n",
        "\n",
        "            # 모델의 출력 결과와 타겟 문장을 비교하여 손실 계산\n",
        "            loss = criterion(output, trg)\n",
        "\n",
        "            # 전체 손실 값 계산\n",
        "            epoch_loss += loss.item()\n",
        "\n",
        "    return epoch_loss / len(iterator)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HdmhWLNcs76v"
      },
      "source": [
        "* 학습(training) 및 검증(validation) 진행\n",
        "    * **학습 횟수(epoch)**: 10"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HPjtaQ6CXvGk"
      },
      "source": [
        "import math\n",
        "import time\n",
        "\n",
        "def epoch_time(start_time, end_time):\n",
        "    elapsed_time = end_time - start_time\n",
        "    elapsed_mins = int(elapsed_time / 60)\n",
        "    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n",
        "    return elapsed_mins, elapsed_secs"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XTe-5FdvXwdE",
        "outputId": "3b4817d7-a14c-4da1-e577-542d8ca6436b"
      },
      "source": [
        "import time\n",
        "import math\n",
        "import random\n",
        "\n",
        "N_EPOCHS = 10\n",
        "CLIP = 1\n",
        "best_valid_loss = float('inf')\n",
        "\n",
        "for epoch in range(N_EPOCHS):\n",
        "    start_time = time.time() # 시작 시간 기록\n",
        "\n",
        "    train_loss = train(model, train_iterator, optimizer, criterion, CLIP)\n",
        "    valid_loss = evaluate(model, valid_iterator, criterion)\n",
        "\n",
        "    end_time = time.time() # 종료 시간 기록\n",
        "    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n",
        "\n",
        "    if valid_loss < best_valid_loss:\n",
        "        best_valid_loss = valid_loss\n",
        "        torch.save(model.state_dict(), 'transformer_german_to_english.pt')\n",
        "\n",
        "    print(f'Epoch: {epoch + 1:02} | Time: {epoch_mins}m {epoch_secs}s')\n",
        "    print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):.3f}')\n",
        "    print(f'\\tValidation Loss: {valid_loss:.3f} | Validation PPL: {math.exp(valid_loss):.3f}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 01 | Time: 0m 17s\n",
            "\tTrain Loss: 4.228 | Train PPL: 68.601\n",
            "\tValidation Loss: 3.054 | Validation PPL: 21.197\n",
            "Epoch: 02 | Time: 0m 14s\n",
            "\tTrain Loss: 2.842 | Train PPL: 17.143\n",
            "\tValidation Loss: 2.325 | Validation PPL: 10.231\n",
            "Epoch: 03 | Time: 0m 14s\n",
            "\tTrain Loss: 2.250 | Train PPL: 9.489\n",
            "\tValidation Loss: 1.990 | Validation PPL: 7.317\n",
            "Epoch: 04 | Time: 0m 14s\n",
            "\tTrain Loss: 1.896 | Train PPL: 6.658\n",
            "\tValidation Loss: 1.815 | Validation PPL: 6.144\n",
            "Epoch: 05 | Time: 0m 14s\n",
            "\tTrain Loss: 1.648 | Train PPL: 5.194\n",
            "\tValidation Loss: 1.721 | Validation PPL: 5.588\n",
            "Epoch: 06 | Time: 0m 14s\n",
            "\tTrain Loss: 1.456 | Train PPL: 4.291\n",
            "\tValidation Loss: 1.650 | Validation PPL: 5.208\n",
            "Epoch: 07 | Time: 0m 14s\n",
            "\tTrain Loss: 1.303 | Train PPL: 3.680\n",
            "\tValidation Loss: 1.641 | Validation PPL: 5.161\n",
            "Epoch: 08 | Time: 0m 14s\n",
            "\tTrain Loss: 1.178 | Train PPL: 3.248\n",
            "\tValidation Loss: 1.627 | Validation PPL: 5.090\n",
            "Epoch: 09 | Time: 0m 14s\n",
            "\tTrain Loss: 1.068 | Train PPL: 2.911\n",
            "\tValidation Loss: 1.637 | Validation PPL: 5.140\n",
            "Epoch: 10 | Time: 0m 14s\n",
            "\tTrain Loss: 0.973 | Train PPL: 2.647\n",
            "\tValidation Loss: 1.646 | Validation PPL: 5.188\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "W1oT2_2yYCBM",
        "outputId": "784b76a0-7567-40eb-d276-5f25178f4264"
      },
      "source": [
        "# 학습된 모델 저장\n",
        "from google.colab import files\n",
        "\n",
        "files.download('transformer_german_to_english.pt')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_57eeb6fd-5cfd-4e19-9185-d083ad1cc561\", \"transformer_german_to_english.pt\", 36206909)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KvW5ZDUwwJaI"
      },
      "source": [
        "#### **모델 최종 테스트(testing) 결과 확인**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "id": "YlO_lLD3wJx0",
        "outputId": "61e3a9f2-e487-4ecb-b76f-0c7e8b339974"
      },
      "source": [
        "# !wget https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/EbWFiKBmscFBrbzCQxRyqwsBwcXgdKdimkdsBl2dE9VYaQ?download=1 -O transformer_german_to_english.pt"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NotImplementedError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-34-f053b0b5db0f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'wget https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/EbWFiKBmscFBrbzCQxRyqwsBwcXgdKdimkdsBl2dE9VYaQ?download=1 -O transformer_german_to_english.pt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36msystem\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     97\u001b[0m       \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'also_return_output'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_system_commands\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_system_compat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint:disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpip_warn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_system_commands.py\u001b[0m in \u001b[0;36m_system_compat\u001b[0;34m(shell, cmd, also_return_output)\u001b[0m\n\u001b[1;32m    451\u001b[0m   \u001b[0;31m# is expected to call this function, thus adding one level of nesting to the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m   \u001b[0;31m# stack.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m   result = _run_command(\n\u001b[0m\u001b[1;32m    454\u001b[0m       \u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar_expand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcmd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclear_streamed_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m   )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_system_commands.py\u001b[0m in \u001b[0;36m_run_command\u001b[0;34m(cmd, clear_streamed_output)\u001b[0m\n\u001b[1;32m    165\u001b[0m   \u001b[0mlocale_encoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlocale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpreferredencoding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlocale_encoding\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0m_ENCODING\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 167\u001b[0;31m     raise NotImplementedError(\n\u001b[0m\u001b[1;32m    168\u001b[0m         \u001b[0;34m'A UTF-8 locale is required. Got {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocale_encoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m     )\n",
            "\u001b[0;31mNotImplementedError\u001b[0m: A UTF-8 locale is required. Got ANSI_X3.4-1968"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sScSSNYbwKPR",
        "outputId": "01f3a511-47e3-427c-85b6-c342d54b7a07"
      },
      "source": [
        "model.load_state_dict(torch.load('transformer_german_to_english.pt'))\n",
        "\n",
        "test_loss = evaluate(model, test_iterator, criterion)\n",
        "\n",
        "print(f'Test Loss: {test_loss:.3f} | Test PPL: {math.exp(test_loss):.3f}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Loss: 1.667 | Test PPL: 5.298\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lIE5KXd5wVUf"
      },
      "source": [
        "#### **나만의 데이터로 모델 사용해보기**\n",
        "\n",
        "* 테스트 데이터셋을 이용해 모델 테스트 진행"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "plUPXH4UYKEU"
      },
      "source": [
        "# 번역(translation) 함수\n",
        "def translate_sentence(sentence, src_field, trg_field, model, device, max_len=50, logging=True):\n",
        "    model.eval() # 평가 모드\n",
        "\n",
        "    # tokenization\n",
        "    if isinstance(sentence, str):\n",
        "        nlp = spacy.load('de')\n",
        "        tokens = [token.text.lower() for token in nlp(sentence)]\n",
        "    else:\n",
        "        tokens = [token.lower() for token in sentence]\n",
        "\n",
        "    # 처음에 <sos> 토큰, 마지막에 <eos> 토큰 붙이기\n",
        "    tokens = [src_field.init_token] + tokens + [src_field.eos_token]\n",
        "    if logging:\n",
        "        print(f\"전체 소스 토큰: {tokens}\")\n",
        "\n",
        "    src_indexes = [src_field.vocab.stoi[token] for token in tokens] # 인덱스로 변경\n",
        "    if logging:\n",
        "        print(f\"소스 문장 인덱스: {src_indexes}\")\n",
        "\n",
        "    src_tensor = torch.LongTensor(src_indexes).unsqueeze(0).to(device)\n",
        "\n",
        "    # 소스 문장에 따른 마스크 생성\n",
        "    src_mask = model.make_src_mask(src_tensor)\n",
        "\n",
        "    # 인코더(endocer)에 소스 문장을 넣어 출력 값 구하기\n",
        "    with torch.no_grad():\n",
        "        enc_src = model.encoder(src_tensor, src_mask)\n",
        "\n",
        "    # 처음에는 <sos> 토큰 하나만 가지고 있도록 하기\n",
        "    trg_indexes = [trg_field.vocab.stoi[trg_field.init_token]]\n",
        "\n",
        "    for i in range(max_len):\n",
        "        trg_tensor = torch.LongTensor(trg_indexes).unsqueeze(0).to(device)\n",
        "\n",
        "        # 출력 문장에 따른 마스크 생성\n",
        "        trg_mask = model.make_trg_mask(trg_tensor)\n",
        "\n",
        "        with torch.no_grad():\n",
        "            output, attention = model.decoder(trg_tensor, enc_src, trg_mask, src_mask)\n",
        "\n",
        "        # 출력 문장에서 가장 마지막 단어만 사용\n",
        "        pred_token = output.argmax(2)[:,-1].item()\n",
        "        trg_indexes.append(pred_token) # 출력 문장에 더하기\n",
        "\n",
        "        # <eos>를 만나는 순간 끝\n",
        "        if pred_token == trg_field.vocab.stoi[trg_field.eos_token]:\n",
        "            break\n",
        "\n",
        "    # 각 출력 단어 인덱스를 실제 단어로 변환\n",
        "    trg_tokens = [trg_field.vocab.itos[i] for i in trg_indexes]\n",
        "\n",
        "    # 첫 번째 <sos>는 제외하고 출력 문장 반환\n",
        "    return trg_tokens[1:], attention"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DZZufujhxNuO",
        "outputId": "83d70134-b7e6-45c3-80e7-764c58587de8"
      },
      "source": [
        "example_idx = 10\n",
        "\n",
        "src = vars(test_dataset.examples[example_idx])['src']\n",
        "trg = vars(test_dataset.examples[example_idx])['trg']\n",
        "\n",
        "print(f'소스 문장: {src}')\n",
        "print(f'타겟 문장: {trg}')\n",
        "\n",
        "translation, attention = translate_sentence(src, SRC, TRG, model, device, logging=True)\n",
        "\n",
        "print(\"모델 출력 결과:\", \" \".join(translation))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "소스 문장: ['eine', 'mutter', 'und', 'ihr', 'kleiner', 'sohn', 'genießen', 'einen', 'schönen', 'tag', 'im', 'freien', '.']\n",
            "타겟 문장: ['a', 'mother', 'and', 'her', 'young', 'song', 'enjoying', 'a', 'beautiful', 'day', 'outside', '.']\n",
            "전체 소스 토큰: ['<sos>', 'eine', 'mutter', 'und', 'ihr', 'kleiner', 'sohn', 'genießen', 'einen', 'schönen', 'tag', 'im', 'freien', '.', '<eos>']\n",
            "소스 문장 인덱스: [2, 8, 364, 10, 134, 70, 624, 565, 19, 780, 200, 20, 88, 4, 3]\n",
            "모델 출력 결과: a mother and her baby enjoy a beautiful day outdoors . <eos>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SnRoAAEjyckb"
      },
      "source": [
        "* 어텐션 맵(Attention Map) 시각화"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7lNAb_YKYLmU"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as ticker\n",
        "\n",
        "def display_attention(sentence, translation, attention, n_heads=8, n_rows=4, n_cols=2):\n",
        "\n",
        "    assert n_rows * n_cols == n_heads\n",
        "\n",
        "    # 출력할 그림 크기 조절\n",
        "    fig = plt.figure(figsize=(15, 25))\n",
        "\n",
        "    for i in range(n_heads):\n",
        "        ax = fig.add_subplot(n_rows, n_cols, i + 1)\n",
        "\n",
        "        # 어텐션(Attention) 스코어 확률 값을 이용해 그리기\n",
        "        _attention = attention.squeeze(0)[i].cpu().detach().numpy()\n",
        "\n",
        "        cax = ax.matshow(_attention, cmap='bone')\n",
        "\n",
        "        ax.tick_params(labelsize=12)\n",
        "        ax.set_xticklabels([''] + ['<sos>'] + [t.lower() for t in sentence] + ['<eos>'], rotation=45)\n",
        "        ax.set_yticklabels([''] + translation)\n",
        "\n",
        "        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n",
        "        ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnCvQ5d8YMrj",
        "outputId": "177db31a-1744-44f1-b557-4e5010941ab0"
      },
      "source": [
        "example_idx = 10\n",
        "\n",
        "src = vars(test_dataset.examples[example_idx])['src']\n",
        "trg = vars(test_dataset.examples[example_idx])['trg']\n",
        "\n",
        "print(f'소스 문장: {src}')\n",
        "print(f'타겟 문장: {trg}')\n",
        "\n",
        "translation, attention = translate_sentence(src, SRC, TRG, model, device, logging=True)\n",
        "\n",
        "print(\"모델 출력 결과:\", \" \".join(translation))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "소스 문장: ['eine', 'mutter', 'und', 'ihr', 'kleiner', 'sohn', 'genießen', 'einen', 'schönen', 'tag', 'im', 'freien', '.']\n",
            "타겟 문장: ['a', 'mother', 'and', 'her', 'young', 'song', 'enjoying', 'a', 'beautiful', 'day', 'outside', '.']\n",
            "전체 소스 토큰: ['<sos>', 'eine', 'mutter', 'und', 'ihr', 'kleiner', 'sohn', 'genießen', 'einen', 'schönen', 'tag', 'im', 'freien', '.', '<eos>']\n",
            "소스 문장 인덱스: [2, 8, 364, 10, 134, 70, 624, 565, 19, 780, 200, 20, 88, 4, 3]\n",
            "모델 출력 결과: a mother and her baby enjoy a beautiful day outdoors . <eos>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "glUG8EnJYPGc",
        "outputId": "eb99e9f7-4d1c-4a23-8f75-033cb55384f9"
      },
      "source": [
        "display_attention(src, translation, attention)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-41-8dbe449b1e4c>:20: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
            "  ax.set_xticklabels([''] + ['<sos>'] + [t.lower() for t in sentence] + ['<eos>'], rotation=45)\n",
            "<ipython-input-41-8dbe449b1e4c>:21: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
            "  ax.set_yticklabels([''] + translation)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x2500 with 8 Axes>"
            ],
            "image/png": "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cx2SBpRJkyapt7e3NmjQIMXl3dkju27dOj106JDN1QdHjBihefPm1YYNG5qDDCd9nPXw7ayS1dtw0tdzxIgRGhQUpO7u7vrWW2+pqtqM27Jz504z8C1btsymXkcKTJs3b1YXFxddvHixOc36np49e1YLFCigISEh+s4779wzKGWGjH4ea/1Hjx7VgQMHauPGjbVVq1b66aef6qlTp1Q18TOctCc3s7djR7Bv3z6tVq2aBgUFqaenpwYEBOi0adP05s2beuHCBW3cuLF6eHho3bp1dcmSJfrmm29q/fr1NTAwUA8fPmzv8uEgyHn/IedlPHIeOc+KnJc25DxynjPnPBr1HMi+ffs0X758WqNGDZ04caLNfX/++ae2aNFCPTw8tEePHrp06VL94IMPtF69ehocHGz2umSkw4cPJ/sSOXDggE6ePFkHDhyokydPNqffvn1bV69erWXLltWgoKAM+2AfPnxYn3vuOXNclTsDX9euXdXT01MXLlxoM2CtauaHiKSsX46xsbHJei02bNighmFo06ZNbXovVVUXLlyo5cqV06+++kpPnjyZKbVZd7zXr1/XLVu2aKVKlWwGE06LlHYqp06d0vDwcG3cuLF+9913evnyZXOda9WqZQYH1cRAUbZsWY2IiDAPz88sSWtNGnKWLl2qZcuW1Vy5cunGjRtV1TbwXbp0SV999VUNDg42d2wpLadz584aHByshmGYvZRJr642cuRIzZs3rzZq1Mg83eHOcU0yOwzYYxu2vo7W1yoqKkqHDRumefLk0SpVqpjzJR0raefOndquXTs1DEO//vrrdD1vZtu2bZu6uLjosGHDbD4H1vWYOnWqenp6aqVKlXTGjBmZ9t4mHSMnM77j7hz4vUyZMlq3bl2tXr26enp6atu2bc0jLi5evGgGviFDhmTrwHf06FENCQnROnXq6IcffqhffvmlPvfcc2oYho4fP15V//txU6pUKXOQ/IceeihLr8QJx0bOS7kGct6DIeeR85Ii56UPOY+c58w5j0Y9B3HmzBktV66cNmnS5K6H558+fVoHDRqkbm5uahiG+vn5acWKFTPlg9SnTx8NDAw0D11PSEjQmzdv6jPPPKOGYaiPj4/Zk5F0kNhVq1aZOwvrYfnWL4C0fvnFx8ebp6R069YtxcB3/PhxrVq1qubNm1cXL15s05ObVb0n1p3bgQMH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0PoBttZjDQ/bt2/XkJAQffjhh1PcWbi5uekLL7yQ5udLujOIiYnRBg0a2AzEO2/ePA0PD9fixYubgW/btm3aqFEjrVy5sjZo0ED37t2bvpV9AJGRkWbtc+bMUcMwNCgoSH/++WdznqSBr23btporVy7z/c4ob731lhqGoQMGDNDLly+r6n9XM0p6NECtWrXM3gjVxMPyrYFvzpw59+xZtX4Wzp07p1FRUTY9udaAdPToUX3sscfUxcVFa9eurW+//bY+//zzWrlyZQ0MDEw23kdGurOHMCYmRsuWLauNGzdO8ZLzK1euVMMwzEPtU5J0G/zrr7+0YsWK6uLioj/88IOqJh527+3trRERETant5w6dUrHjh2r+fPnt9vVvbJqG77zdVdVffTRR7V69eo2Y07cOU9kZKSqJvbkZtWP17tJGoguXbqkTZo00QEDBpi9kps3b1YvLy99/PHHtVu3bmoYhr733nt3Xd68efO0RYsWGhAQkGEDQR88eFBDQkI0T548mjdvXjUMQwMCAmxO9Uka+EqVKqX+/v66atWqZMvq2LGj5s6dW7///nvzM3769GmNiorSVq1a6bfffmvOu3LlSo2IiNCAgACb744NGzZos2bNNCwsLNuNrXK//fPatWvVy8tLy5Urp++++66eOnVKZ8yYoQ0aNNC8efPaffBvOAZyni1y3oMh55Hz7kTOSz1yHjkvqeyc82jUs5MOHTpoyZIlUxwQ2CohIUFXrlypDRs21KCgoEz/IFl3EseOHdMxY8Zohw4dtGfPnuaXxs6dOzU0NFSrV69us7PYt2+fNmvWTP39/TUqKirVp0dYn+/ixYt65MgR3bx5s5YrV07Pnz9vM98nn3xiBr7169eb02NjY20OE84qly9f1mLFimnx4sXNdZ01a5YahqFNmza16S217kyuX7+unTp1StO4Falx8+ZN7dChg/r5+Wm/fv3UYrHotGnTtGnTprp9+3ZVVf3qq6+0QoUKGhERoZ999pn52D179mjnzp3VMAxduHDhPZ/nn3/+UV9fXzNwz5w5U0uUKKGVK1c2e88jIyN18uTJWrlyZQ0ICNDixYvrk08+aV4WPTNYP0N///23fvTRR+YVBTt16qR+fn424du6c4uKilJPT08dPnz4PZepmjg4dPv27bV06dJmL95PP/2kFy9e1Pbt26thGPrss8/qN998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d7/vmqRXpCtdurTmypVLq1WrZobEmJgYHT16tLq5uWmjRo3M+ZM+l3WavT7bWSG1++etW7fa5cccnAM5j5yXEch55LyUkPNSh5xHzktJds55NOplEesX7wcffGD2pMTFxemJEyf0f//7n5YqVUoNw9Ann3zSPGw2q3322WdqGIbZSzB8+HB1c3PTOXPmmL1YFovFvJrUzp070zV2yOnTp9XPz09r1aqlLVq0sLnPYrHomDFj1MPDQxs3bmxOT9pzkdX+/vtvLVu2rM3pDEkD36xZs9Tb21tr165tfhFOmjRJvb29M/1KYGfPntW8efOa44bcunVLO3XqpK6urtqvXz9zUOWkge+bb77RevXqJbsKWNJlWq+UZb18+++//65ubm565MiRFL/0586dq3nz5tW6devqrVu3smyH8Oijj2rz5s3Nvzds2KDDhg3TvHnzakREhPbv319v3bqlX331lc6YMUOXLVuWqlMP9u3bp25ubjpmzBhzWtIxWEaNGmUGGeugs46wE8yqbfh+r/uAAQM0ISFBf/75Z/38889127ZtZohxBBcuXNCBAwfqCy+8oHnz5tVHHnnE/NFk3Yl/9tlnmi9fPvX09NRChQqpm5tbsquiZbTUbs9JQ9jUqVNT/V1z7Ngx9fX11dy5c2v+/Pn1m2++MZd1+fJlHT16tHp6etp89945oH92lJb9s73GUYLjI+f9h5yXcch55LykyHmpQ84j5yWVE3IejXpZKD4+XitVqqSNGjXSo0ePapcuXTR//vwaEBCgzzzzjG7YsMFm/qzeeezdu1fz5s2rS5Ys0RdffFHd3Nx09uzZNr07AwcO1BIlSphXDUqPqKgobd26tfr4+GiFChX09OnTevv2bXODs37peHh4aPPmze2+Ez1x4oRWqFBBw8LCzNMdVP/7grhy5Yr27t1bDcPQBg0a2PSWZLaYmBjt27evuru7m+Mx3Lx5U9u3b2+OvZJS4LvfaS1JA9+0adN09+7d6ufnpzt37tQLFy6oxWLRS5cumcs+e/aszps3764BMjNcu3ZNmzZtqhERETpz5kwdM2aMFixYUIsUKaLPPvusNm3aVL29vXXx4sVpXvaFCxe0SpUqWrRoUf3+++/N6dYd47vvvqvVqlXTRo0aaXBwsP76668Ztl4PIiu24dS+7p988klGrVamuHXrll6+fFkXLlyoefPm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e/fu1datW2uJEiU0LCxMBw4cqD/++GOGPc61a9fstobt2rVLP/zwQ/3666910aJFWqhQIS1Tpox+++23qQasEydO6IEDB/TMmTOZPujq0KFD1TAM/eOPP1Q15wU+2wrhypUrunbtWn3ggQf0p59+Mq//9ttvNTAwUGvVqmW3xe7o0aN68OBBPXv2bJYMjLt//35t166dtm/fXjt06JDi+t69e6thGPriiy/eU+B77bXX1MXFRZ9++mlz7JWjR49qkyZN1NPTU4cNG6Zbt27Vr7/+Wvv27atubm53HGw1s9zpM7xu3TpzvrsFvrSKiYnRRo0aadWqVc2xVK5du6Y///yzhoaGamRkpC5btsycf86cOWoYhrZp00avXbt2v08X6ZDauuPw4cMaFhamdevW1fnz5+umTZvMwb779Olj91mpV6+eenp66vPPP28OGp7dzZ07VwsVKqSGYaiXl5cOGDDAPKRpy5Yt6uXlpRMmTLC4Sjgqch45zxmQ824i56WOnOc8yHnp5yg5j6aek5s7d64ahqG5cuVSwzD0ySef1G+++UZVVX/99Vc1DEM/+uijLKnF9kVg2xpTtWpV7dWrlw4bNkx9fHy0cOHCdrug3qvr16/r+PHj9eGHH9YLFy7o8ePH1dvbWzt06GB+gfz6669aqFAhjYqK0jVr1pi7bicmJmpMTEyWDkT+5ZdfapUqVdTf39/cSpmdA99LL72k69evt5t29OhRLVKkiLZt21abNGliTrcth/Xr15vj4yTf5T4rffPNN+YZuLp06WJOTz6wb69evdQwDH355Zdve8pyVfuVYvL/T58+3VwJRkdHq6rqyZMntUOHDuru7m4+fokSJXTq1Knm7bL67Gd3+gx//PHH5vwvvfSS+vj4aMuWLc0fM+l1/vx5zZ8/v/br18+cZtsr46+//tKQkBBt3Lix3euwYMEC3blz5z09Hu6N7T14678jR47U8uXL2w1u/corr6ibm5suXrxY4+Li7AbErly5sgYHB2fLwa7Pnj2rv/76q65bt878rle9+XlasmSJ7tu3z+6H68qVKzUsLMzujH/Arch55DxHQ84j56UHOc85kPPuzpFzHk09J3L+/Hk9ePCg/vDDD3r27Fnzy++nn37SBQsW6I4dO+zeSF988YWGhoZm6WmkL1++rM2bN9dHHnnEbpfctm3bap48eXTFihUZ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Ho+/d+9e7dq1q7q7u2tgYKAGBwdrWFiYFitW7L7HOjl58qR26dJFPTw8dO7cuXaB76233tL8+fOru7u7FipUSIOCgsyzkFnh4sWLGhoaqt26dTOnJd8SZDujVJ48eezOQJUZbCuj3377Tbt06ZJh92tbCfz777+6aNEiHTdunH7++ed2P05uF/gOHDignTp1yrQxB5KH0GXLlmnp0qXV19dXQ0ND9ddff1XV/16P8+fP68SJE9Xd3V0fffRRu/tJ65aX559/Xv39/TU0NNQMTslf7z///FPbt2+vPj4+Om7cuPt5avctsz7DtmV+/vx5ff7559Xd3V1btWqlzzzzjI4YMcJu3m3btmnz5s3VMAz95JNPMu/JZpC2bdtqWFiYTpo0SVetWqWffPKJRkZGamhoaLbbkmv7XKf2XM6dO6edO3fW/Pnza//+/c2Ac+rUKT148KB++eWXum/fvmx5iOn58+d1x44d+uuvv5oDSsfGxurjjz+ufn5+OmTIELv5N27cqAULFtQhQ4Zky710cG/IeXdGzrs35DxyXnLkvPQj591EznO+nEdTz8Hs379fmzdvrv379zc73/Hx8dq+fXv19vbW+fPn232ANm/erAULFjS/RDPjS+bWDr7qzdNZ161bVzdv3qyqN7fOREVFaXBwsDneyalTp3Tjxo06atQoHTp0qC5YsCBdp3S+9YOR/LndKfAtW7ZMhw4dqj179szwgXjTIyEhQa9du6atWrXSvHnz6tq1a83rbKH96NGjWrx4cc2bN6/mz59f4+LiMnVFcfLkSY2KitIKFSrYHSZyr2wrt507d2pkZKQGBwebp/quVauWzps3z5zXdohGjRo1zPeNaspxcTJa8uX56aefarVq1dTFxUVnzpxpPofkAWXSpEnq7e2tdevWve193mmL9ahRo9TNzU1r1aplvt+TP8c//vhDGzVqpDNmzLiv55UeWf0ZTr48hw0bpnny5FF3d3edOHGiqqrduC1bt241A9/SpUvt6nWk0PTzzz9rUFCQjh492u775uTJk1qpUiVLt+Rm9GPZ3icHDx7UAQMGaIMGDbR58+b60Ucf6dGjR1X15lb65FtyM/tz7Ah27dqlVapU0Tx58qinp6cGBQXplClT9Pr163ru3Dlt0KCBenh4aK1atXTx4sX62muvaZ06dTQ4OFj3799vdflwEOS8/5Dz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6lngp59+0pCQEH311VdVNeWp41VvrmxatGhhjmGR2W+k5F/6ISEhWqRIEa1QoYJGRUWpi4uLDho0SM+ePatbtmzR0NDQFLt379mzR//99980P17yLQ6VKlXSPHnyaKVKlbRgwYLmGbuSr0QXLFigkZGRWqpUKbvTyVvh2rVrOnXqVA0JCdEHHnjAXAbTpk0zT+We/Ev41q1ZGaFDhw7at29fVb35XnnsscfU19dX+/Xrpw0aNLDbxV715rgBlStX1qioKP3kk0/M6b///rt2797dHHj60Ucf1VdeeSXF4+3Zs0fd3d11x44d5rSZM2emCHzXr1/X+Ph43bNnj168eDFTw3jys3CVLFlSixUrpjNmzFDVm4elFCxYUKtWrao7duywW6mvXr1aAwMDdd68eXe8X9WbZ3xr3bq1lixZ0tyK98MPP+j58+e1devWahiGPvnkk/rVV1/pJ598op07d1Z3d3d9/fXXM+15305WfYbvtNwPHz6shQoV0qpVq+off/xht9y3bdum9erV006dOmXK4UlplZSUpOvWrbMLNp06ddLdu3frG2+8odu2bVPVm1tO/f39tWPHjnrmzBndsmWLeZjCra9vQkKCLl68WEuUKKFlypRJ9/d1hw4ddODAgXbT9u/fr8OGDdN69erpSy+9ZHed7cflrd81t261T+7nn39WwzB08uTJqnrzM9K+fXvt3r27FitWTHPnzm3+WEr+3bt9+3Z96623tGHDhtqyZUsdN25cus926UzSsn4+fvy4bt++XT/++GPdsWNHpp2dFM6LnEfOu1/kPHLerch5aUPOI+fdSXbNeTT1LPDyyy+rt7d3qh3+f//91ww7v/zyi7nrZ1Y4c+aMVq5c2TzeXvXmWXLKlSunwcHBunXrVlW9ORBtaGio1qxZUzds2JDuAUJt8584cUKLFy+ulStX1meffVarV6+uhmHYjdWQ/Etn4cKFGhAQoJUrV87y3d1tNds++FevXtVZs2ZpYGDgbQOf7Yszo129elU7deqk/v7+5i7u169f10cffVTz5Mmj+fLl088//1xV1TyrnKp94FuyZIk53bZiuHDhgtavX18Nw9ApU6aY1ycmJuqmTZvUzc3NfDyb5IEvK8/wZnPgwAENDQ3Vpk2b6ooVK8zpCQkJumTJEg0PD9cyZcrou+++q//8848uX75cGzVqpBEREXcd+6VNmzYaFhamY8eO1Q0bNuiECRO0aNGiahiG/vjjjxobG6vPPfec+vj4qJubm7q5uWn58uXNMTlUs/5MUVn1Gb7dck9MTDSXe6lSpfT111/X3bt364wZM7ROnToaGhqaqVv00+Lw4cP6yCOPaJUqVfT8+fPapEkTdXFxsdvqbNvj4sEHH7Tb66JFixZaunRpNQwjxef76NGjumHDBruBs9Mi+ef533//NV8L2xbjiIgI8wdu8s9z8sCX1u+aOnXqaGRkpHmWyR49euhff/2lI0aM0Fy5cmn16tVvGxgd5cx1me1O6+ejR49m6Zk34bzIeeS8+0HO+w85zx457+7IeeS8O8muOY+mXhbbtWuXhoaG6pAhQ+ym7969W+fMmaOFCxfW0NBQc3fyrDzT1x9//KEhISG6cOFCM9QMGzZMvby8dPbs2XbjBvz666/q4uKiDRo0SNdWOtsXyeXLl/XIkSNas2ZN87leuXLFPA16gwYNzOeePPB98sknlgyWnHyLU1oD30MPPWRuDcposbGxZlixDdx7/fp1bdu2rRqGoQ8//LA5eG/yQwzWrFmjVatW1bCwMF22bFmK+z158qS2b99eDcPQt99+25y+efNmdXNzM7fcJA8xtkM0HnzwwSx7bZKSkjQuLk67deumDzzwgBlibLXFxsbqoUOHdPXq1VqzZk1z66ufn58WKlTorruUb968WT09PXXcuHF2PyzWrVtn3p/tzF///POPfvPNN/rbb7/ZBUgrTv2e2Z/htC73NWvWaJ06dczl7u3treXKlbPbA8Aqly5d0g8++ECDg4M1ODhYQ0JCdPXq1XbLIDY2VsuUKaM9e/Y0p9nGMXn//fcz/Idc8s/z6dOnVfXm59n2WUz+eU4eumyB727fNcnPSFeyZEnNlSuXVqlSxXwesbGxOnLkSHVzc9P69eub8yd/LNs0K84+mVXSun7euHGjJZ9vOAdyHjkvI5DzyHmpIefdHTmPnHc72Tnn0dTLIrYv3nfffdfckhIfH69HjhzR//3vf1qiRAk1DEM7dOhg7jab1T7++GM1DMPcSjB06FB1c3PT2bNnmyu8mJgY82xSW7duvaexQ44dO6YBAQFao0YNbdq0qd11MTExOmrUKPXw8NAGDRqY05Nvuchq//zzj5YuXdrucIbkgW/mzJnq7e2tNWvWNL8IJ02apN7e3pl+JrCTJ09q7ty5zXFDbty4oe3bt1dXV1d95plnzEGVkwe+r776SmvXrp3qWcBs92k7U5btTE+///67urm52Z26PfmX/vvvv6+5c+fWWrVq6Y0bN7JshfDwww9rkyZNzL/XrVunzz33nObOnVujoqK0X79+euPGDf388891+vTpunTp0jQdevDVV1+pYRi6ceNGVbX/wfHdd99pWFiYGoah3377baq3t2qFmFWf4bst9/79+2tSUpL+9NNP+sknn+imTZvMEOMI4uPjtXz58moYhpYsWdL8nCYfFPrhhx/WcuXKaUJCgu7bt09fe+01LVKkiP7+++/m/WT0Cj+tn+fkIeztt99O83fNoUOH1N/fX318fDQ8PFy/+uor874uXryoI0eOVE9PT7vv3lsH9M+O0rN+tuKQKzgHct5/yHkZh5xHzkuOnJc25DxyXnI5IefR1MtCiYmJWqFCBa1fv74ePHhQO3XqpOHh4RoUFKS9evXSdevW2c2f1SuMnTt3au7cuXXx4sX6/PPPq5ubm86aNctuy8aAAQO0WLFi5gCj9+L06dPaokUL9fX11XLlyumxY8c0ISHB/MDZvnQ8PDy0SZMmlm8xOHLkiJYrV04jIiLMwx1U//uCuHTpkvbu3VsNw9C6devabS3JbLGxsdq3b191d3c3x2O4fv26tm7d2hx7JbXAd7fDWpIHvilTpuj27ds1ICBAt27dqufOndOYmBi9cOGCed8nT57UOXPm3DZAZoYrV65oo0aNNCoqSmfMmKGjRo3S/Pnza6FChfTJJ5/URo0aqbe3ty5atCjd971r1y51c3PTUaNGmdOSj8EyYsQIc+uk7UxSVr9PVbPmM5zW5f7hhx9m1NPKcOfOndMBAwbos88+q7lz59aHHnrI3BPCFuA+/vhjzZs3r3p6emqBAgXUzc0txVnRMlp6Ps+3Dv6cFocPH9bhw4fr0qVLtWLFihoREaErV6403x8XLlxwqO/erOTo62c4B0d/H5HzUkfOI+epkvNsyHmZh5xnHUdfP98vmnpZaO7cuWoYhpYuXVq9vb21TJkyOnDgQD116pSlWyhtTp8+rWXLltXAwED19PTU999/324Ft2HDBq1Zs6b26dPnvus9fvy4OZbAhAkTzOnJA9/o0aPVMAxt3br1fT1WRjh06JA+8sgjGhYWZhf4bOMR/Pnnn1qsWDG7sWKyardd25gfhmHcdgWR2iEad3Py5El9/PHH1TAMbd68ubq6uqq7u7vmzZtXIyIiNDw8XAsXLqwRERHasGHDLB//RvXmGcvy58+vPj4+6u7urkOHDjXP3Hb27Fn18/PT0aNHp/t+z507p5UqVdLChQvrN998Y063rWDfeustrVKlitavX19DQkL0119/zZgndJ+y6jOcWcs9K924cUMvXryo8+fP19y5c2u1atXsBlW+ceOG/vTTTzpo0CAdPHiwfvrpp+Z1mbmiT8/n2fZ+TE89tu+AP//8UytUqGCO5ZI88DnSd29WcfT1M5yDo7+PyHm3R84j56mS82zIeeS87MbR18/3i6ZeFvriiy80NDRUa9Sooe+8846eP3/e/JA6ynHbv/32mwYEBGh4eLjdl9uPP/6ojRs31sjIyAwbT+PEiRPmVsLk43rYVk4XLlzQcePGWT7gqs2hQ4e0Vq1aKQKf6s3DMGrUqKHz5s3T/fv3Z3ltMTExt11BBAUFabdu3ezG2UirkydPaqdOndTDw0MrV66sixYt0smTJ+uYMWN09OjROmzYMH3mmWcsPe35iRMndPPmzfrPP//YHTKyYcMGLVSokL733nvmtPTYsmWLent7a7Vq1fSrr74yp588eVJ79uypw4cP1y+//FLDw8O1R48eWXo4yp1k1Wc4s5Z7Vrt06ZK+//77GhwcbBf4Ll++rDNnzkwxrkpWfFdn1uc5uaSkJN2+fbu5JTd54Dt//rxDffdmBWdYP8PxOcP7iJx3e+Q8cp4qOc+GnJd5yHlZzxnWz/eDpl4Wio+P1wMHDqQ4a46jfRl+++236u/vr0FBQVq3bl2tW7euFitWTMPCwjJ8pZ589//UAp+jLZuDBw9qrVq1NCgoSBcuXKiJiYm6efNmbd68uQ4ZMsTSMwfdbgVRr149LVCggN3WqfQ4fvy4du7cWQ3D0A8++CAjS840P/30k7Zo0UILFy58X+PdfP311+a4FH379tVZs2Zpp06d1M3NTT/66CNVVe3YsaOGh4frpUuXMqr8+5aVn+HkMmq5Z7XLly/rnDlzNDg4WB966CH96KOPdOTIkWoYhk6bNs2SmjLr83yr5IHv66+/NvfEcLTv3vS4l+9hZ1k/w7E5y/uInHd75DxyHjnv9sh5GYecd3/S+13sLOvne0VTz0KO/Cbau3evDhw4UB9++GGtVauWjhgxItPG0Uge+Kz6Yk2P6OhobdWqlRqGoeHh4RocHKy5c+fWnTt3Wl2a3Qpi7NixqnpzN+yjR4/e1/2eOHHCPOOabVBl1ZvvYUd6H1+9elX79eunNWrU0PDw8Aw5C9eff/6pdevWVX9/fzUMQ8PCwvSNN94wr+/cubMWKFDAHAPDUWTlZzgzlntWu3z5si5YsEAjIyPVMAz19fW1bDB7m8z6PN9q+/bt+sADD6iPj4/dYUjOKDo6WgcMGKA///zzfd2PI32vwXk58vuInHd75DxyHjnPHjkvc5Dz7k1GZD1H+l7LCDT14BBOnjypHTt2VMMwdMaMGVaXc1fnzp3Tjz76SNu3b6+DBg3SvXv3Wl2SKSYmRp9//vkU49jcL9shGo78Gv35559aoEABbdOmzT2d7et2Ll26pMeOHdMdO3bYBabNmzdrVFSUNm/e3G6Q4pwms5Z7Vrtx44ZGR0frJ598oj/88IM53crd8jPr83yr3377TR955BFLDivLSCtWrFDDMLRx48Z2ZzMEYC1yXsYh55Hzsho5L/OQ89KPrJeSoaoqQCpUVQzDSPH/zHLixAkZNWqUDBs2TKKiojL1sTJKYmKiuLi4ZPqySa+YmBh54403pFOnThm6LJ3hNTp9+rR4enqKv79/pj2GqsrKlStl9uzZsnnzZvn555+ldOnSmfZ49yorP8NZsdytkJSUJC4uLpbWkFmf51vFx8eLh4dHpt1/Vrh+/bosWrRIatasKSVLlrS6HMChkfPujpzneMh5/yHn3T9ynvMh66VEUw8OJTExUVxdXa0uI1vIrJUUr5HI5MmTZeTIkVK6dGn5+OOPpVy5claXhGzOEUInANwvMkTGIedlHnIesho5D/eDph4A3IOlS5fKQw89JAUKFLC6FAAAAGQgch4AZ0FTDwDSgS1pAAAA2RM5D4CzoakHAAAAAAAAOBk2QwAAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqaek4qPj5cxY8ZIfHy81aU4TC2OUge1UAu1ZK9aHKUOaqEW5ByO9D5ylFocpQ5qoRZqyV61OEod1EIt94oTZTip2NhYCQgIkJiYGPH396cWB6qDWqiFWrJXLY5SB7VQC3IOR3ofOUotjlIHtVALtWSvWhylDmqhlnvFnnoAAAAAAACAk6GpBwAAAAAAADgZN6sLyGmSkpLk+PHj4ufnJ4Zh3PP9xMbG2v1rJUepxVHqSF4DtdijltRRS+ocpRZHqSN5DdRiL7vVoqpy6dIlyZcvn7i4sP3VmZDzsn8dyWugFnvUkjpqSZ2j1OIodSSvgVrsZbdaMjrnMaZeFvv3338lIiLC6jIAAICDO3r0qBQoUMDqMpAO5DwAAJAWGZXz2FMvi/n5+Vldgh0XF1erSzD9deig1SWYyhQubHUJJh+fQKtLMF25EmN1CcmwPQJA9uZomQF352iv2fHTp6wuwZQvNMzqEkyuro7zEygx8YbVJQAALJBRmcFx1mg5xP0cipEZHKkexwrCjrNcHOk1cqRa2MkYQHbnSN+5SBtHe80c5cx8Io61bBypFgBAzpRR6yIGagEAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1Eujv//+W/r16yclS5YULy8vCQ4Olnbt2kl0dLTVpQEAAOA+kPMAAIAzcrO6AGexZcsW2bhxo3Ts2FEKFCgg0dHRMmPGDKlTp47s3r1bvL29rS4RAAAA94CcBwAAnJGhqmp1Ec7g2rVr4uXlZTdt8+bNUr16dfnwww+la9euqd4uPj5e4uPjzb9jY2MlIiIiU2tND1dXx+nrHjl10uoSTAXzhFhdgsnXN9DqEkxXrsRYXYJJNcnqEgAgU8XExIi/v7/VZeQI2TXnXY67ZnUJJj8vH6tLMDlS/k1IuG51CQAAC2RUzuPw2zRKHvRu3Lgh586dk2LFiklgYKBs3779trebMGGCBAQEmBdHCnoAAAAg5wEAAOdEUy+Nrl27Ji+99JJERESIh4eH5MmTR0JCQuTixYsSE3P7vZdGjhwpMTEx5uXo0aNZWDUAAADuhpwHAACckePse+7gBg4cKPPnz5fBgwdL9erVJSAgQAzDkI4dO0pS0u0PA/Tw8BAPD48srBQAAADpQc4DAADOiKZeGi1dulS6d+8ub775pjktLi5OLl68aF1RAAAAuG/kPAAA4Iw4/DaNXF1d5dZzikyfPl0SExMtqggAAAAZgZwHAACcEXvqpVGLFi1k4cKFEhAQIFFRUbJp0yZZu3atBAcHW10aAAAA7gM5DwAAOCOaemk0depUcXV1lcWLF0tcXJzUrFlT1q5dK40bN7a6NAAAANwHch4AAHBGht56rAEyVWxsrAQEBFhdhsnV1XH6ukdOnbS6BFPBPCFWl2Dy9Q20ugTTlSu3PwNgVlO9/cDlAJAdxMTEiL+/v9VlIB0cLeddjrtmdQkmPy8fq0swOVL+TUi4bnUJAAALZFTOY0w9AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMm4WV0ArJWYmGB1CaaI4GCrS0hGrS7AdPnyBatLSMawugAAAJBGvp5eVpdgSkxKsroEk6sL+zWkzpFynuNkcQBwZKzRAAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMtm+qdejRw/x9fW1ugwAAABkArIeAADIqbJFU+/q1asyZswY2bBhg9WlAAAAIIOR9QAAAFLKNk29sWPHEvQAAACyIbIeAABAStmiqWc1VZVr165ZXQYAAAAyAVkPAAA4okxv6o0ZM0YMw5D9+/dLly5dJCAgQEJCQuTFF18UVZWjR4/Ko48+Kv7+/hIWFiZvvvmm3e1Pnz4tvXv3lrx584qnp6dUqFBBFixYYF4fHR0tISEhIiIyduxYMQxDDMOQMWPG2N3PsWPHpHXr1uLr6yshISEydOhQSUxMtJsnKSlJpkyZImXKlBFPT0/Jmzev9O3bVy5cuGA3X2RkpLRo0UK+/fZbeeCBB8TLy0tmzZqVgUsNAADAOZD1AAAArJFle+p16NBBkpKSZOLEiVKtWjUZP368TJkyRRo2bCj58+eXSZMmSbFixWTo0KHy448/iojItWvXpE6dOrJw4ULp3LmzvP766xIQECA9evSQqVOniohISEiIzJgxQ0REHnvsMVm4cKEsXLhQ2rRpYz52YmKiNG7cWIKDg+WNN96Q2rVry5tvvimzZ8+2q7Fv374ybNgwqVmzpkydOlV69uwpixcvlsaNG8uNGzfs5t23b5906tRJGjZsKFOnTpWKFStm4tIDAABwbGQ9AACALKaZ7OWXX1YR0T59+pjTEhIStECBAmoYhk6cONGcfuHCBfXy8tLu3burquqUKVNURHTRokXmPNevX9fq1aurr6+vxsbGqqrqmTNnVET05ZdfTvH43bt3VxHRcePG2U2vVKmSVqlSxfz7p59+UhHRxYsX2833zTffpJheqFAhFRH95ptv7vr84+LiNCYmxrwcPXpURYRLKhdHYvWycNyL4UAXq5cFFy5cuGTuJSYmxurVYZrk5KxHzkv7JTEpyWEuVi8Lx71Yne3IeVy4cMk5l4zKeVm2p96TTz5p/t/V1VUeeOABUVXp3bu3OT0wMFBKliwphw8fFhGRVatWSVhYmHTq1Mmcx93dXZ599lm5fPmy/PDDD2l+/Kefftru70ceecR8HBGRzz77TAICAqRhw4Zy9uxZ81KlShXx9fWV9evX292+cOHC0rhx47s+7oQJEyQgIMC8REREpLlmAAAAZ5ETsx45DwAAWMktqx6oYMGCdn8HBASIp6en5MmTJ8X0c+fOiYjI33//LcWLFxcXF/veY+nSpc3r08LT09Mci8UmKCjIbvyUAwcOSExMjISGhqZ6H6dPn7b7u3Dhwml67JEjR8qQIUPMv2NjYwl8AAAg28mJWY+cBwAArJRlTT1XV9c0TRMRUdVMf+xbJSUlSWhoqCxevDjV628Nil5eXml6bA8PD/Hw8EjTvAAAAM4qJ2Y9ch4AALBSljX17kWhQoVkx44dkpSUZLcFd+/eveb1IiKGYdz3YxUtWlTWrl0rNWvWTHPDDgAAAPeOrAcAAHDvsmxMvXvRrFkzOXnypCxZssSclpCQINOnTxdfX1+pXbu2iIh4e3uLiMjFixfv+bHat28viYmJ8sorr6S4LiEh4b7uGwAAACmR9QAAAO6dQ++p16dPH5k1a5b06NFDtm3bJpGRkbJ06VL55ZdfZMqUKeLn5yciNw+PiIqKkiVLlkiJEiUkd+7cUrZsWSlbtmyaH6t27drSt29fmTBhgvzxxx/SqFEjcXd3lwMHDshnn30mU6dOlccffzyznioAAECOQ9YDAAC4dw7d1PPy8pINGzbIiBEjZMGCBRIbGyslS5aU+fPnS48ePezmnTNnjgwcOFD+97//yfXr1+Xll19OV9ATEZk5c6ZUqVJFZs2aJaNGjRI3NzeJjIyULl26SM2aNTPwmQEAAICsBwAAcO8MzeiRinFHsbGxEhAQYHUZDsmR3ooZMXZP9uRIy8Vx3i8AkBliYmLE39/f6jKQDuS820tMSrK6BJOri0OPQGQhch4AZJWMynms0QAAAAAAAAAnQ1MPAAAAAAAAcDI09QAAAAAAAAAnQ1MPAAAAAAAAcDI09QAAAAAAAAAnQ1MPAAAAAAAAcDI09QAAAAAAAAAnQ1MPAAAAAAAAcDI09QAAAAAAAAAn42Z1AbCaYXUBJk8Pb6tLMJ2/fNnqEky5fX2tLiEZtboAk4uLq9UliIhIUlKi1SUAAJAqd3cPq0swubo4zr4EcdevW12CyTNXLqtLSMZxch4AIG0cZ+0KAAAAAAAAIE1o6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqbefYqMjJQePXpYXQYAAAAyGDkPAAA4Mpp6AAAAAAAAgJOhqQcAAAAAAAA4GZp6AAAAAAAAgJPJlk29v//+W/r16yclS5YULy8vCQ4Olnbt2kl0dLTdfB988IEYhiG//PKLDBkyREJCQsTHx0cee+wxOXPmjN28qirjx4+XAgUKiLe3t9StW1d27dqVhc8KAAAA5DwAAICb3KwuIDNs2bJFNm7cKB07dpQCBQpIdHS0zJgxQ+rUqSO7d+8Wb29vu/kHDhwoQUFB8vLLL0t0dLRMmTJFBgwYIEuWLDHneemll2T8+PHSrFkzadasmWzfvl0aNWok169fv2Mt8fHxEh8fb/4dGxubsU8WAAAgByHnAQAA3JQtm3rNmzeXxx9/3G5ay5YtpXr16rJs2TLp2rWr3XXBwcGyZs0aMQxDRESSkpJk2rRpEhMTIwEBAXLmzBmZPHmyNG/eXL788ktzvhdeeEFee+21O9YyYcIEGTt2bAY+OwAAgJyLnAcAAHBTtjz81svLy/z/jRs35Ny5c1KsWDEJDAyU7du3p5i/T58+ZoATEXnkkUckMTFR/v77bxERWbt2rVy/fl0GDhxoN9/gwYPvWsvIkSMlJibGvBw9evQ+nhkAAEDORs4DAAC4KVvuqXft2jWZMGGCzJ8/X44dOyaqal4XExOTYv6CBQva/R0UFCQiIhcuXBARMUNf8eLF7eYLCQkx570dDw8P8fDwSP+TAAAAQArkPAAAgJuyZVNv4MCBMn/+fBk8eLBUr15dAgICxDAM6dixoyQlJaWY39XVNdX7SR4SAQAAYD1yHgAAwE3Zsqm3dOlS6d69u7z55pvmtLi4OLl48eI93V+hQoVEROTAgQNSpEgRc/qZM2fMrbwAAADIfOQ8AACAm7LlmHqurq4ptr5Onz5dEhMT7+n+GjRoIO7u7jJ9+nS7+50yZcr9lAkAAIB0IucBAADclC331GvRooUsXLhQAgICJCoqSjZt2iRr166V4ODge7q/kJAQGTp0qEyYMEFatGghzZo1k99//11Wr14tefLkyeDqAQAAcDvkPAAAgJuyZVNv6tSp4urqKosXL5a4uDipWbOmrF27Vho3bnzP9zl+/Hjx9PSUmTNnyvr166VatWqyZs0aad68eQZWDgAAgDsh5wEAANxkKKMEZ6nY2FgJCAiwuoxkDKsLMHnk8rS6BNOJ82esLsGU29fX6hIckotL6gOfZ7WkpHs73AsA7iYmJkb8/f2tLgPp4Gg5z93dcc7Me+NGvNUlmOKuX7e6BJNnrlxWlwAAsEBG5bxsOaYeAAAAAAAAkJ3R1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMnQ1AMAAAAAAACcDE09AAAAAAAAwMm4WV0ArKZWF2CKv37N6hJMuX19rS7B9Oc//1hdgqnpQ/WsLsF06lS01SUAAODQEhJuWF2CQ/Lx8ra6BNPwV9+zugTTkb+irS7BtOqr960uQURELl++YHUJAHBH7KkHAAAAAAAAOBmaegAAAAAAAICToakHAAAAAAAAOBmaegAAAAAAAICToakHAAAAAAAAOBmaegAAAAAAAICToakHAAAAAAAAOBmaegAAAAAAAICToakHAAAAAAAAOJkc0dQbM2aMGIYhZ8+etboUAAAAZCByHgAAyKlyRFMPAAAAAAAAyE5o6gEAAAAAAABOhqZeBrl69arVJQAAACATkPMAAIAjylFNvYsXL0qPHj0kMDBQAgICpGfPnilC2qJFi6RKlSri5eUluXPnlo4dO8rRo0ft5qlTp46ULVtWtm3bJrVq1RJvb28ZNWpUVj4VAAAAJEPOAwAAOU2Oauq1b99eLl26JBMmTJD27dvLBx98IGPHjjWvf/XVV6Vbt25SvHhxeeutt2Tw4MGybt06qVWrlly8eNHuvs6dOydNmzaVihUrypQpU6Ru3bpZ/GwAAABgQ84DAAA5jZvVBWSlSpUqydy5c82/z507J3PnzpVJkybJ33//LS+//LKMHz/ebmtsmzZtpFKlSvLee+/ZTT958qTMnDlT+vbte8fHjI+Pl/j4ePPv2NjYDHxGAAAAECHnAQCAnCdH7an39NNP2/39yCOPyLlz5yQ2NlaWL18uSUlJ0r59ezl79qx5CQsLk+LFi8v69evtbuvh4SE9e/a862NOmDBBAgICzEtERESGPicAAACQ8wAAQM6To/bUK1iwoN3fQUFBIiJy4cIFOXDggKiqFC9ePNXburu72/2dP39+yZUr110fc+TIkTJkyBDz79jYWAIfAABABiPnAQCAnCZHNfVcXV1Tna6qkpSUJIZhyOrVq1Odz9fX1+5vLy+vND2mh4eHeHh4pL9YAAAApBk5DwAA5DQ5qql3J0WLFhVVlcKFC0uJEiWsLgcAAAAZhJwHAACyoxw1pt6dtGnTRlxdXWXs2LGiqnbXqaqcO3fOosoAAABwP8h5AAAgO2JPvf9XtGhRGT9+vIwcOVKio6OldevW4ufnJ0eOHJHPP/9c+vTpI0OHDrW6TAAAAKQTOQ8AAGRHNPWSGTFihJQoUULefvttGTt2rIiIRERESKNGjaRVq1YWVwcAAIB7Rc4DAADZjaG3HoOATBUbGysBAQFWlwEn8uc//1hdgqnpQ/WsLsF06lS01SWIiEhiYoLVJQDIpmJiYsTf39/qMpAOjpbzDMNxRtpRTbK6BJOrq+Ps1zB03DSrSzAd+Sva6hJMq7563+oSRETk8uULVpcAIJvKqJznOGt6AAAAAAAAAGlCUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMjT1AAAAAAAAACdDUw8AAAAAAABwMoaqqtVF5CSxsbESEBBgdRlwIq6ublaXYMqXr7jVJZi++HGV1SWIiEiVwoWtLgFANhUTEyP+/v5Wl4F0IOchvdzdPawuwVS3zhNWl2Bq9XRbq0sQEZEBbVtYXQKAbCqjch576gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOxumaemPGjBHDMOTs2bMZcn+RkZHSokWLDLkvAAAA3DtyHgAAQNo5XVMPAAAAAAAAyOlo6gEAAAAAAABOhqYeAAAAAAAA4GSctql39uxZad++vfj7+0twcLAMGjRI4uLizOvnz58v9erVk9DQUPHw8JCoqCiZMWPGbe9vzZo1UrFiRfH09JSoqChZvny5ed3hw4fFMAx5++23U9xu48aNYhiGfPzxxxn7BAEAAHIoch4AAMDdOW1Tr3379hIXFycTJkyQZs2aybRp06RPnz7m9TNmzJBChQrJqFGj5M0335SIiAjp16+fvPvuuynu68CBA9KhQwdp2rSpTJgwQdzc3KRdu3by3XffiYhIkSJFpGbNmrJ48eIUt128eLH4+fnJo48+mnlPFgAAIAch5wEAANydm9UF3KvChQvLihUrRESkf//+4u/vL++9954MHTpUypcvLz/88IN4eXmZ8w8YMECaNGkib731lvTv39/uvvbv3y/Lli2TNm3aiIhI7969pVSpUjJ8+HBp2LChiIh069ZN+vbtK3v37pVSpUqJiMiNGzfk008/lTZt2oi3t3eqdcbHx0t8fLz5d2xsbMYtBAAAgGyInAcAAHB3Trun3q2BbeDAgSIismrVKhERu6AXExMjZ8+eldq1a8vhw4clJibG7rb58uWTxx57zPzb399funXrJr///rucPHlSRG5uMfb09LTbivvtt9/K2bNnpUuXLretc8KECRIQEGBeIiIi7vEZAwAA5AzkPAAAgLtz2qZe8eLF7f4uWrSouLi4SHR0tIiI/PLLL9KgQQPx8fGRwMBACQkJkVGjRomIpAh7xYoVE8Mw7KaVKFFCRMS8v8DAQGnZsqV89NFH5jyLFy+W/PnzS7169W5b58iRIyUmJsa8HD169J6eLwAAQE5BzgMAALg7p23q3Sp5WDt06JDUr19fzp49K2+99ZZ8/fXX8t1338n//vc/ERFJSkq6p8fo1q2bHD58WDZu3CiXLl2SlStXSqdOncTF5faL0cPDQ/z9/e0uAAAASDtyHgAAQEpOO6begQMHpHDhwubfBw8elKSkJImMjJQvv/xS4uPjZeXKlVKwYEFznvXr16d6XwcPHhRVtQuM+/fvFxGRyMhIc1qTJk0kJCREFi9eLNWqVZOrV69K165dM/iZAQAA5GzkPAAAgLtz2j31bj272fTp00VEpGnTpuLq6ioiIqpqXh8TEyPz589P9b6OHz8un3/+ufl3bGysfPjhh1KxYkUJCwszp7u5uUmnTp3k008/lQ8++EDKlSsn5cuXz7DnBAAAAHIeAABAWjjtnnpHjhyRVq1aSZMmTWTTpk2yaNEieeKJJ6RChQri6ekpuXLlkpYtW0rfvn3l8uXL8v7770toaKicOHEixX2VKFFCevfuLVu2bJG8efPKvHnz5NSpU6mGw27dusm0adNk/fr1MmnSpKx4qgAAADkKOQ8AAODunHZPvSVLloiHh4eMGDFCvv76axkwYIDMnTtXRERKliwpS5cuFcMwZOjQoTJz5kzp06ePDBo0KNX7Kl68uCxZskRWrVolI0aMkBs3bsiSJUukcePGKeatUqWKlClTRlxcXKRz586Z+hwBAAByInIeAADA3Rma/NgFpEmlSpUkd+7csm7dunTfNjY2VgICAjKhKmRXrq6Os0NtvnzF7z5TFvnix1VWlyAiIlWSjfkEABkpJiaGEy9YgJyHrOTu7mF1Caa6dZ6wugRTq6fbWl2CiIgMaNvC6hIAZFMZlfOcdk89q2zdulX++OMP6datm9WlAAAAIAOR8wAAgDNxnF2AHNzOnTtl27Zt8uabb0p4eLh06NDB6pIAAACQAch5AADAGbGnXhotXbpUevbsKTdu3JCPP/5YPD09rS4JAAAAGYCcBwAAnBFNvTQaM2aMJCUlyZ49e6R27dpWlwMAAIAMQs4DAADOiKYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOxs3qAnIqV1d3MQzD6jIkIeG61SXgLpKSkqwuwXT8+AGrSzAtmP251SWIiEifZ1+zugTT7GmjrC4BAAA4qQ0/fGx1CaYrV2OsLkFERN77YpXVJZj6tW5mdQkAHBB76gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOhqYeAAAAAAAA4GRo6gEAAAAAAABOJsc1A4+KIAABAABJREFU9Xr06CGRkZFWlwEAAIAMRs4DAAA5SY5r6gEAAAAAAADOzs3qArLa+++/L0lJSVaXAQAAgAxGzgMAADlJjmvqubu7W10CAAAAMgE5DwAA5CROcfjtsWPHpFevXpI3b17x8PCQMmXKyLx588zrN2zYIIZhyKeffiqvvvqqFChQQDw9PaV+/fpy8OBBu/tKbayVK1euyHPPPScRERHi4eEhJUuWlDfeeENU1Zyndu3aUqFChVTrK1mypDRu3DjjnjAAAEAOQc4DAAC4Nw6/p96pU6fkoYceEsMwZMCAARISEiKrV6+W3r17S2xsrAwePNicd+LEieLi4iJDhw6VmJgYmTx5snTu3Fl+/fXX296/qkqrVq1k/fr10rt3b6lYsaJ8++23MmzYMDl27Ji8/fbbIiLStWtXeeqpp2Tnzp1StmxZ8/ZbtmyR/fv3y+jRozNtGQAAAGRH5DwAAIB75/BNvRdeeEESExPlr7/+kuDgYBERefrpp6VTp04yZswY6du3rzlvXFyc/PHHH5IrVy4REQkKCpJBgwalCGjJrVy5Ur7//nsZP368vPDCCyIi0r9/f2nXrp1MnTpVBgwYIEWLFpV27drJwIEDZdGiRTJx4kTz9osWLRIfHx9p06ZNqvcfHx8v8fHx5t+xsbH3t0AAAACyCXIeAADAvXPow29VVZYtWyYtW7YUVZWzZ8+al8aNG0tMTIxs377dnL9nz55m0BMReeSRR0RE5PDhw7d9jFWrVomrq6s8++yzdtOfe+45UVVZvXq1iIgEBATIo48+Kh9//LF5uEZiYqIsWbJEWrduLT4+Pqne/4QJEyQgIMC8RERE3NvCAAAAyEbIeQAAAPfHoZt6Z86ckYsXL8rs2bMlJCTE7tKzZ08RETl9+rQ5f8GCBe1uHxQUJCIiFy5cuO1j/P3335IvXz7x8/Ozm166dGnzeptu3brJP//8Iz/99JOIiKxdu1ZOnTolXbt2ve39jxw5UmJiYszL0aNH0/LUAQAAsjVyHgAAwP1x6MNvk5KSRESkS5cu0r1791TnKV++vOzevVtERFxdXVOdJ/lAyPejcePGkjdvXlm0aJHUqlVLFi1aJGFhYdKgQYPb3sbDw0M8PDwy5PEBAACyC3IeAADA/XHopl5ISIj4+flJYmLiHQOVLezdi0KFCsnatWvl0qVLdltx9+7da15v4+rqKk888YR88MEHMmnSJPniiy/kqaeeum3IBAAAQOrIeQAAAPfHoQ+/dXV1lbZt28qyZctk586dKa4/c+bMfT9Gs2bNJDExUd555x276W+//bYYhiFNmza1m961a1e5cOGC9O3bVy5fvixdunS57xoAAAByGnIeAADA/XHoPfVERCZOnCjr16+XatWqyVNPPSVRUVFy/vx52b59u6xdu1bOnz9/X/ffsmVLqVu3rrzwwgsSHR0tFSpUkDVr1siKFStk8ODBUrRoUbv5K1WqJGXLlpXPPvtMSpcuLZUrV76vxwcAAMipyHkAAAD3zqH31BMRyZs3r/z222/Ss2dPWb58uQwYMECmTp0q58+fl0mTJt33/bu4uMjKlStl8ODB8tVXX8ngwYNl9+7d8vrrr8tbb72V6m26desmInLHgZMBAABwZ+Q8AACAe+fwe+qJiISGhso777yT4tAJmzp16qQ6SHJkZGSK6YmJieLmZv+0fX195a233rptuLtVrly5xDAM6dy5cxqfAQAAAFJDzgMAALg3Dr+nXkY7ceKE5MmT555vr6oyd+5cqV27thQsWDADKwMAAMD9IOcBAICcxCn21MsIO3bskC+++EJ+/PFHGTZsWLpvf+XKFVm5cqWsX79e/vrrL1mxYkUmVAkAAID0IucBAICcKMc09ZYvXy7Tp0+Xjh07ysiRI9N9+zNnzsgTTzwhgYGBMmrUKGnVqlUmVAkAAID0IucBAICcKMc09caMGSNjxoy559unNm4LAAAArEfOAwAAOVGOG1MPAAAAAAAAcHY09QAAAAAAAAAnQ1MPAAAAAAAAcDI09QAAAAAAAAAnQ1MPAAAAAAAAcDI55uy3jiYpKVEMw7C6DNyW47w20z79wuoSTEOeaGd1CaZpE4ZYXYKIiAQH57O6BJObWy6rSzAlJNywugSH5OXla3UJJl+fQKtLMF24eMrqEkyqSVaXIKoqSUmJVpeB++Di4uoQOS8xMcHqEnAXN27EW12CQ/rll+VWlyAiIt7e/laXYHprsWMsExGRIZ3bWF0CnIr160MbR1g3q6qIaIbdH3vqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqAQAAAAAAAE6Gph4AAAAAAADgZGjqpdHff/8t/fr1k5IlS4qXl5cEBwdLu3btJDo62urSAAAAcB/IeQAAwBm5WV2As9iyZYts3LhROnbsKAUKFJDo6GiZMWOG1KlTR3bv3i3e3t5WlwgAAIB7QM4DAADOiKZeGjVv3lwef/xxu2ktW7aU6tWry7Jly6Rr166p3i4+Pl7i4+PNv2NjYzO1TgAAAKQPOQ8AADgjDr9NIy8vL/P/N27ckHPnzkmxYsUkMDBQtm/fftvbTZgwQQICAsxLREREVpQLAACANCLnAQAAZ0RTL42uXbsmL730kkRERIiHh4fkyZNHQkJC5OLFixITE3Pb240cOVJiYmLMy9GjR7OwagAAANwNOQ8AADgjDr9No4EDB8r8+fNl8ODBUr16dQkICBDDMKRjx46SlJR029t5eHiIh4dHFlYKAACA9CDnAQAAZ0RTL42WLl0q3bt3lzfffNOcFhcXJxcvXrSuKAAAANw3ch4AAHBGHH6bRq6urqKqdtOmT58uiYmJFlUEAACAjEDOAwAAzog99dKoRYsWsnDhQgkICJCoqCjZtGmTrF27VoKDg60uDQAAAPeBnAcAAJwRTb00mjp1qri6usrixYslLi5OatasKWvXrpXGjRtbXRoAAADuAzkPAAA4I5p6aRQYGCjz5s1LMT06OjrriwEAAECGIecBAABnxJh6AAAAAAAAgJOhqQcAAAAAAAA4GZp6AAAAAAAAgJOhqQcAAAAAAAA4GZp6AAAAAAAAgJOhqQcAAAAAAAA4GZp6AAAAAAAAgJOhqQcAAAAAAAA4GZp6AAAAAAAAgJMxVFWtLiIniY2NlYCAgP//y7C0lpt4+R2di4ur1SWYfHwC7j5TDlOhQj2rSzD9+ef3Vpdg6v7MKKtLML0zeajVJZgMw3G2pakmWV2CyZG+5wzD+nWzqkpSUqLExMSIv7+/1eUgHexzHgBkT47UQnCE9TZwLzIq5znOrwsAAAAAAAAAaUJTDwAAAAAAAHAyNPUAAAAAAAAAJ0NTDwAAAAAAAHAyNPUAAAAAAAAAJ0NTDwAAAAAAAHAyNPUAAAAAAAAAJ0NTDwAAAAAAAHAyNPUAAAAAAAAAJ0NTDwAAAAAAAHAy6W7qjRkzRgzDkLNnz2ZGPZnKVntyCQkJ8vzzz0tERIS4uLhI69at7/s+AQAAnBE57+73CQAA4CjcrC4go129elUmT54sderUkTp16tx1/nnz5snrr78ugwcPlsqVK0vBggUzv0gAAACkGzkPAADgP9myqTd27FgRkRRhb/To0TJixAi7ad9//73kz59f3n777awqEQAAAPeAnAcAAPCfbNfUuxM3Nzdxc7N/yqdPn5bAwEBrCgIAAECGIOcBAICc5p5PlHH27Flp3769+Pv7S3BwsAwaNEji4uLs5lm0aJFUqVJFvLy8JHfu3NKxY0c5evSo3Tw//fSTtGvXTgoWLCgeHh4SEREh//vf/+TatWt2893uMIsePXpIZGSkiIhER0dLSEiIiIiMHTtWDMMQwzBkzJgxImI/Lkp0dLQYhiHr16+XXbt2mfNu2LBBNmzYYP4/OdttPvjgg3tbaAAAAE6AnAcAAOD47rmp1759e4mLi5MJEyZIs2bNZNq0adKnTx/z+ldffVW6desmxYsXl7feeksGDx4s69atk1q1asnFixfN+T777DO5evWqPPPMMzJ9+nRp3LixTJ8+Xbp165bumkJCQmTGjBkiIvLYY4/JwoULZeHChdKmTZtU5124cKGUKlVKChQoYM5bunTp9C8MAACAbIScBwAA4Pju+fDbwoULy4oVK0REpH///uLv7y/vvfeeDB06VAICAuTll1+W8ePHy6hRo8zbtGnTRipVqiTvvfeeOX3SpEni5eVlztOnTx/5P/buOzqK+uvj+J0UUkglhQQIBAglCU0QUJDeq4CCIki1UtQfghRRAVEEG4hKkSICKgoqoHQElCrYUHoVpNeEGkj2Pn/w7JgloQSSzG7yfp2TA9mdzN7Z3dn57J2Z78TExMigQYPkwIEDGRrQOG/evPLwww/Ls88+K+XKlZOOHTvedNqOHTvKpEmTxN3d3WHabdu23fZj3kpSUpIkJSWZvycmJmbavAEAALICOe/2kPMAAICV7vhIvZ49ezr83rt3bxERWbBggXzzzTdis9mkXbt2cvLkSfMnIiJCSpQoIStWrDD/LnXQu3Dhgpw8eVKqVasmqiq///77nZbnNEaMGCGBgYHmT1RUlNUlAQAA3BQ57/aQ8wAAgJXu+Ei9EiVKOPxevHhxcXNzk/3794ubm5uoappp7Dw9Pc3/HzhwQF599VWZN2+enDlzxmG6hISEOy3PaQwcOFD69Olj/p6YmEjgAwAATo2cd3vIeQAAwEqZdvVb+8DEIiI2m00Mw5CFCxeKu7t7mmn9/PxERCQlJUUaNGggp0+flv79+0vp0qUlb968cujQIenSpYvYbDaH+atqmnmlpKRk1iKkuyx3+1heXl7i5eV1tyUBAABYhpyXPnIeAACw0h039Xbt2iVFixY1f9+9e7fYbDaJjo4Wd3d3UVUpWrSolCxZ8obz+Ouvv2Tnzp0ybdo0hwGTly5dmmba4OBg2bt3b5rb//nnH4ffbxTUMiI4OFhExGGg5/QeCwAAICci5wEAADi/Ox5T76OPPnL4fezYsSIi0qRJE2nTpo24u7vL0KFD0+x1VVU5deqUiIi5dzf1NKoqY8aMSfN4xYsXl+3bt8uJEyfM2/78809Zs2aNw3S+vr4ikjaoZUSRIkXE3d1dfvrpJ4fbP/744zueJwAAgKsg5wEAADi/Oz5Sb9++fdKyZUtp3LixrFu3TmbMmCGPPfaYlC9fXkREhg8fLgMHDpT9+/dLq1atxN/fX/bt2yfffvutPPXUU9K3b18pXbq0FC9eXPr27SuHDh2SgIAAmTNnTpoxV0REunXrJu+99540atRIunfvLsePH5fx48dLfHy8w5XGfHx8JC4uTmbNmiUlS5aUfPnySZkyZaRMmTK3vWyBgYHStm1bGTt2rBiGIcWLF5fvv/9ejh8/fqdPFwAAgMsg5wEAADi/Oz5Sb9asWeLl5SUDBgyQH374QXr16iWTJ0827x8wYIDMmTNH3NzcZOjQodK3b1+ZN2+eNGzYUFq2bCki1wZSnj9/vlSoUEFGjBghQ4cOlRIlSshnn32W5vFiY2Pls88+k4SEBOnTp4/MmzdPpk+fLhUrVkwz7aRJk6RgwYLyv//9T9q3by+zZ8/O8PKNHTtWHnzwQRk/frwMHjxYChcuLNOmTcvwfAAAAFwNOQ8AAMD5GZreqMTIMomJiRIYGPj/v939uDB3j5ff2bm5pR2E3Cp58wbeeqJcpnz5ulaXYPrzzx+tLsHU+dlBVpdg+nBUX6tLMBnGHe9Ly3SqtltPlE2c6XMuM8Zsu1uqKjZbiiQkJEhAQIDV5SADHHMeAORMztRCcIbtNnAnMivnOc+3CwAAAAAAAAC3haYeAAAAAAAA4GJo6gEAAAAAAAAuhqYeAAAAAAAA4GJo6gEAAAAAAAAuhqYeAAAAAAAA4GJo6gEAAAAAAAAuhqYeAAAAAAAA4GJo6gEAAAAAAAAuxsPqAgDcnM2WYnUJpnPnTltdgsnLy9fqEkTEuV6fixcTrS7B9OGovlaXYCpfvo7VJZicaR0qVKiU1SWYVq+eY3UJAAAn4pXHx+oSRETkytUkq0swqdqsLsHk5uZudQmmI2fPWl2CKTIo2OoSnJRaXUCOxpF6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4mFzZ1BsyZIgYhmF1GQAAAMhk5DwAAJBb5MqmHgAAAAAAAODKaOoBAAAAAAAALoamHgAAAAAAAOBicnxTb/Xq1VK5cmXx9vaW4sWLy4QJE9JMM3XqVKlbt66Eh4eLl5eXxMXFybhx4xym6dy5s4SGhsrVq1fT/H3Dhg2lVKlSWbYMAAAASIucBwAAcjMPqwvISn/99Zc0bNhQwsLCZMiQIZKcnCyvvfaa5M+f32G6cePGSXx8vLRs2VI8PDxk/vz50qNHD7HZbNKzZ08REXn88cfls88+k8WLF0vz5s3Nvz169Kj8+OOP8tprr2XrsgEAAORm5DwAAJDbGaqqVheRVVq3bi2LFi2SHTt2SOHChUVEZNu2bVK2bFlJSUkR+6JfunRJfHx8HP62cePGsmvXLtmzZ4+IiNhsNilSpIhUr15dvvzyS3O6999/X1588UXZs2ePFC1aNE0NSUlJkpSUZP6emJgoUVFR//+bM1yZLce+/MjhvLx8rS5BREQqVWpkdQmmDRvmW12CKSUl2eoSTOXL17G6BNO5c6etLsFUqJDzHHm0evUcq0swOcNVU1VVbLYUSUhIkICAAKvLcVrOn/MA3CmvPD63nigbXLmadOuJsomqzeoSTIbhPCf8HT7jPNkqMijY6hKcFD2H9GRWznOetTGTpaSkyOLFi6VVq1Zm0BMRiY2NlUaNHL+Epw56CQkJcvLkSalVq5bs3btXEhISRETEzc1NOnToIPPmzZNz586Z08+cOVOqVauWbtATERkxYoQEBgaaPwQ9AACAu0POAwAAyMFNvRMnTsilS5ekRIkSae67flyUNWvWSP369SVv3rwSFBQkYWFhMmjQIBERM+yJiHTq1EkuXbok3377rYiI7NixQ3799Vd5/PHHb1jHwIEDJSEhwfw5ePBgZiweAABArkXOAwAAyMFNvdu1Z88eqVevnpw8eVLee+89+eGHH2Tp0qXyv//9T0SunY5hFxcXJ5UqVZIZM2aIiMiMGTMkT5480q5duxvO38vLSwICAhx+AAAAkPXIeQAAICfLsRfKCAsLEx8fH9m1a1ea+3bs2GH+f/78+ZKUlCTz5s1zOH1jxYoV6c63U6dO0qdPHzly5Ih8/vnn0qxZMwkO5tx5AACA7ELOAwAAyMFH6rm7u0ujRo3ku+++kwMHDpi3b9u2TRYvXuwwnYhI6uuFJCQkyNSpU9Odb/v27cUwDHn++edl79690rFjxyxaAgAAAKSHnAcAAJCDj9QTERk6dKgsWrRIatSoIT169JDk5GQZO3asxMfHy+bNm0VEpGHDhpInTx5p0aKFPP3003L+/Hn55JNPJDw8XI4cOZJmnmFhYdK4cWP5+uuvJSgoSJo1a5bdiwUAAJDrkfMAAEBul2OP1BMRKVeunCxevFjCwsLk1VdflSlTpsjQoUOldevW5jSlSpWS2bNni2EY0rdvXxk/frw89dRT8vzzz99wvp06dRIRkXbt2omXl1eWLwcAAAAckfMAAEBuZ2jq8xFwW+bOnSutWrWSn376SWrUqJGhv01MTJTAwMD//83I/OIyjJcfrsnLy9fqEkREpFKlRlaXYNqwYb7VJZhSUpKtLsFUvnwdq0swnTt32uoSTIUKlbr1RNlk9eo5VpdgMgzrt82qKjZbiiQkJHDhBQtkXs4DcKe88vhYXYKIiFy5mmR1CSZV260nyiaG4TzHBh0+4zzZKjKIMVjTR88hPZmV85xnbXQhn3zyiRQrVkweeOABq0sBAABAJiLnAQAAV5Gjx9TLbF9++aVs3rxZfvjhBxkzZoxT7M0HAADA3SPnAQAAV0NTLwPat28vfn5+0r17d+nRo4fV5QAAACCTkPMAAICroamXAQw/CAAAkDOR8wAAgKthTD0AAAAAAADAxdDUAwAAAAAAAFwMTT0AAAAAAADAxdDUAwAAAAAAAFwMTT0AAAAAAADAxXD1W0txlTXgTiUlXbS6BBERWbv2W6tLSMWwugCn9PffP1tdgqle3cetLsHUsFMzq0swrVs31+oSTCkpyVaXwFVYAeR6SVcuWV2CiIh4eOSxugSTYThPzrt6NcnqEkxFwiOsLsFUvnxtq0sw1WjkPDlvzvRxVpdgstlSrC5BbDabnDhxINPmx5F6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJdr6n366adiGIbs37/f6lIAAACQich5AAAAt8/ypt7HH38sn376qdVlAAAAIJOR8wAAALIOTT0AAABkCXIeAABA1rG8qecqLly4YHUJAAAAyALkPAAA4IruqKn3+++/S5MmTSQgIED8/PykXr16sn79evP+IUOGiGEYaf7u+nFSoqOjZcuWLbJq1SoxDEMMw5DatWub02/ZskXq1q0rPj4+UqhQIRk+fLjYbLZ0a/r4448lPj5evLy8pECBAtKzZ085e/Zsmum+/vprqVSpkvj4+EhoaKh07NhRDh065DBNly5dxM/PT/bs2SNNmzYVf39/6dChg4iI7Nq1Sx566CGJiIgQb29vKVSokDz66KOSkJCQwWcRAADA+ZDzyHkAAMA1eGT0D7Zs2SI1atSQgIAAeemll8TT01MmTJggtWvXllWrVknVqlVve16jR4+W3r17i5+fn7z88ssiIpI/f34RETl69KjUqVNHkpOTZcCAAZI3b16ZOHGi+Pj4pJnPkCFDZOjQoVK/fn159tlnZceOHTJu3DjZuHGjrFmzRjw9PUXkWtjs2rWrVK5cWUaMGCHHjh2TMWPGyJo1a+T333+XoKAgc57JycnSqFEjeeCBB+Sdd94RX19fuXLlijRq1EiSkpKkd+/eEhERIYcOHZLvv/9ezp49K4GBgRl9OgEAAJwGOY+cBwAAXEeGm3qDBw+Wq1evyurVq6VYsWIiItKpUycpVaqUvPTSS7Jq1arbnlerVq1k8ODB5p7U1EaOHCknTpyQDRs2SJUqVUREpHPnzlKiRAmH6U6cOCEjRoyQhg0bysKFC8XN7drBh6VLl5ZevXrJjBkzpGvXrnL16lXp37+/lClTRn766Sfx9vYWEZEHHnhAmjdvLu+//74MHTrUnG9SUpK0bdtWRowYYd72xx9/yL59++Trr7+Whx9+2Lz91VdfveEyJiUlSVJSkvl7YmLibT8/AAAA2YmcR84DAACuI0On36akpMiSJUukVatWZtATEYmMjJTHHntMVq9enWlhZsGCBXLfffeZQU9EJCwszDw9wm7ZsmVy5coVeeGFF8ygJyLy5JNPSkBAgPzwww8iIrJp0yY5fvy49OjRwwx6IiLNmjWT0qVLm9Ol9uyzzzr8bt9Du3jxYrl48eJtLceIESMkMDDQ/ImKirqtvwMAAMhO5DxyHgAAcC0ZauqdOHFCLl68KKVKlUpzX2xsrNhsNjl48GCmFPbPP/+k2VsrImke+59//kn39jx58kixYsXM+280nci1vb32++08PDykUKFCDrcVLVpU+vTpI5MmTZLQ0FBp1KiRfPTRRzcdZ2XgwIGSkJBg/mTW8wMAAJCZyHnkPAAA4Fqy5Oq36Q2eLHJtD7Cr8PLyctgjbPfuu+/K5s2bZdCgQXLp0iV57rnnJD4+Xv79998bzicgIMDhBwAAwFWR8xznQ84DAABWyVBTLywsTHx9fWXHjh1p7tu+fbu4ublJVFSUBAcHi4ikuSrZ9XtJRW4cDIsUKSK7du1Kc/v1j12kSJF0b79y5Yrs27fPvP9G09lvs99/O8qWLSuDBw+Wn376SX7++Wc5dOiQjB8//rb/HgAAwNmQ864h5wEAAFeRoaaeu7u7NGzYUObOnSv79+83bz927Jh8/vnn8sADD0hAQIAUL15cRER++uknc5oLFy7ItGnT0swzb968aUKhiEjTpk1l/fr18ssvv5i3nThxQmbOnOkwXf369SVPnjzywQcfiKqat0+ePFkSEhKkWbNmIiJy7733Snh4uIwfP95hQOOFCxfKtm3bzOluJjExUZKTkx1uK1u2rLi5uTnMEwAAwNWQ88h5AADAtWT46rfDhw+XpUuXygMPPCA9evQQDw8PmTBhgiQlJcmoUaNERKRhw4ZSuHBh6d69u/Tr10/c3d1lypQpEhYWJgcOHHCYX6VKlWTcuHEyfPhwiYmJkfDwcKlbt6689NJLMn36dGncuLE8//zzkjdvXpk4caIUKVJENm/ebP59WFiYDBw4UIYOHSqNGzeWli1byo4dO+Tjjz+WypUrm1db8/T0lJEjR0rXrl2lVq1a0r59ezl27JiMGTNGoqOj5X//+98tl/3HH3+UXr16Sdu2baVkyZKSnJws06dPF3d3d3nooYcy+lQCAAA4FXIeOQ8AALiODDf14uPj5eeff5aBAwfKiBEjxGazSdWqVWXGjBlStWpVEbkWrL799lvp0aOHvPLKKxIRESEvvPCCBAcHS9euXR3m9+qrr8o///wjo0aNknPnzkmtWrWkbt26EhkZKStWrJDevXvLW2+9JSEhIfLMM89IgQIFpHv37g7zGDJkiISFhcmHH34o//vf/yRfvnzy1FNPyZtvvimenp7mdF26dBFfX1956623pH///pI3b15p3bq1jBw5UoKCgm657OXLl5dGjRrJ/Pnz5dChQ+Lr6yvly5eXhQsXyn333ZfRpxIAAMCpkPPIeQAAwHUYmvpcBmS5xMRECQwMtLoMADlS+mNXWcN5Ni3u7hnef5Vl6tV93OoSTA073fp0xOwysFsHq0swpaQk33qiLKaqomqThIQELrzgYsh5QM7i4ZHH6hJMNxqj1ApXrzrPkAR58nhbXYIpNvZ+q0sw1WjkPDlvzvRxVpdgstmsv6iXzWaTEycOZFrOy5Kr3wIAAAAAAADIOjT1AAAAAAAAABdDUw8AAAAAAABwMTT1AAAAAAAAABdDUw8AAAAAAABwMTT1AAAAAAAAABdDUw8AAAAAAABwMTT1AAAAAAAAABdDUw8AAAAAAABwMR5WF5C7GVYXICJqdQGAS3N3d56PUZvNZnUJJlXn+WzJnz/a6hJMRUrHWF2C6fP3J1pdgik0tJDVJZjOnTttdQmiqnLhwlmry8BdI+cBrs5mS7G6BFNISEGrSzCdOHHA6hJMUVGxVpdgMgxn+Ny/5rvPJ1ldgsnXx9/qEkx+/sFWlyApKcmZug5xpB4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYjysLiCnS0pKkqSkJPP3xMREC6sBAABAZiHnAQAAK3GkXhYbMWKEBAYGmj9RUVFWlwQAAIBMQM4DAABWoqmXxQYOHCgJCQnmz8GDB60uCQAAAJmAnAcAAKzE6bdZzMvLS7y8vKwuAwAAAJmMnAcAAKzEkXoAAAAAAACAi6GpBwAAAAAAALgYmnp36eLFi7J9+3Y5efKk1aUAAAAgE5HzAACAM6Opd5d++eUXiY2NlQ8//NDqUgAAAJCJyHkAAMCZ0dQDAAAAAAAAXAxXv71LtWvXFlW1ugwAAABkMnIeAABwZhypBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYD6sLyL0MMQzD6iLE3d3T6hJMyclXrC4ByLCUlGSrSzB5eOSxugSTM63PV65ctroE018bf7G6BFPVWnWtLsH01Wd/W12CyRnWaVW1ugTcpYiIYuLmZv2+88OH91hdQirO8752c3O3ugSTM63vqjarS3A6NluK1SWYzp07bXUJJk9PL6tLMB0+vNvqEkwxMRWtLsF05colq0sw5csXYXUJJjfD+s9/NTL3c9/6tAEAAAAAAAAgQ2jqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC6Gph4AAAAAAADgYmjqAQAAAAAAAC7GaZt6Bw4ckLNnz1r2+BcuXJC9e/da9vgAAAA5FTkPAADg7jlVU+/KlSsye/Zsady4sRQtWlT2799v3nfo0CHp1q2b5M+fX7y8vCQ+Pl6mTJmSZh7Hjx+X7t27S/78+cXb21vKly8v06ZNSzPdl19+KZUqVRJ/f38JCAiQsmXLypgxY8z7T5w4ITExMVK3bl35/PPP5fLly1myzAAAALkBOQ8AACBzOUVTb8uWLdKnTx8pWLCgtG3bVvbv3y9vvvmmlChRQkREjh07Jvfdd58sW7ZMevXqJWPGjJGYmBjp3r27jB492pzPpUuXpHbt2jJ9+nTp0KGDvP322xIYGChdunRxCHJLly6V9u3bS3BwsIwcOVLeeustqV27tqxZs8acJjIyUt555x05ceKEdOjQQSIjI6VXr17y+++/Z9vzAgAA4OrIeQAAAFnDUFW14oHPnTsns2bNkkmTJsmGDRvE399f2rVrJ926dZNq1ao5TPvEE0/IggUL5K+//pKQkBDz9vbt28vChQvlyJEj4uPjI2PGjJEXXnhBZsyYIR06dBARkatXr0qtWrXkr7/+ksOHD4u/v7+88MILMnXqVDl9+rS4u7vfstaNGzfKlClT5Msvv5SzZ8/KPffcI0888YQ89thjEhQUdNO/TUpKkqSkJPP3xMREiYqKEhFDDMO4/Scsi7i7e1hdgik5+YrVJQAuzcMjj9UlmJxpfQ4NLWR1CaaYmEpWl2C65/77rS7B9NVnH1hdgunixXNWlyCqKpcvn5eEhAQJCAiwupw7kttzXkREMXFzs37f+eHDe6wuIRVLvnKky83t1u+L7GLRV7F0qdqsLgE34e3tZ3UJppSUq1aXYHKm/BsTU9HqEkzHju23ugRTRERRq0swubtZ3/9ISUmWzX+tzLScl+1p4+jRo9KtWzeJjIyUp556Sry9veXTTz+Vo0ePyqRJk9IEPVWVOXPmSIsWLURV5eTJk+ZPo0aNJCEhQX777TcREVmwYIFERERI+/btzb/39PSU5557Ts6fPy+rVq0SEZGgoCC5cOGCLF269LZqrly5sowbN06OHDkiM2fOlHz58kmvXr0kMjJSOnbsKAcOHLjh344YMUICAwPNn2sNPQAAgJyHnEfOAwAA2Sfbm3rbt2+XqVOnSlJSkowaNUqWLl0qnTt3Fl9f33SnP3HihJw9e1YmTpwoYWFhDj9du3YVkWvjq4iI/PPPP1KiRIk0e0ZjY2PN+0VEevToISVLlpQmTZpIoUKFpFu3brJo0aJb1u7t7S2PPfaYLFq0SMaMGSM2m01mzpxphs30DBw4UBISEsyfgwcP3vpJAgAAcEHkPHIeAADIPtl+7GHlypXlww8/lMmTJ0u/fv1k5MiR0rFjR+natauUK1cuzfQ227XDwDt27CidO3dOd57p/d3NhIeHyx9//CGLFy+WhQsXysKFC2Xq1KnSqVOndAdbttu2bZtMnTpVpk+fLkePHpX4+Hjp3r271KlT54Z/4+XlJV5eXhmqDwAAwBWR8wAAALJPtjf18ubNKz179pSePXvKb7/9JpMmTZKpU6fK6NGjpWLFitK1a1d57LHHJF++fCIiEhYWJv7+/pKSkiL169e/6byLFCkimzdvFpvN5rAXd/v27eb9dnny5JEWLVpIixYtxGazSY8ePWTChAnyyiuvSExMjDldQkKCzJo1S6ZMmSIbNmwQPz8/eeSRR+SJJ56Q++67LzOfGgAAAJdGzgMAAMg+lo7gW7FiRfn444/lyJEjMm3aNPHz85PevXtLgQIFpF27dnLixAlxd3eXhx56SObMmSN///13mnmcOHHC/H/Tpk3l6NGjMmvWLPO25ORkGTt2rPj5+UmtWrVEROTUqVMO83BzczP3AtsHOz537px07NhRIiMj5emnnxbDMGTSpEly5MgRmTRpEkEPAADgJsh5AAAAWcuyq9/eyK5du2Ty5Mkybdo0WbhwoVSoUEGOHTsmVatWlRMnTsiTTz4pcXFxcvr0afntt99k2bJlcvr0aRERuXTpklSqVEn27NkjvXv3lujoaJk9e7asWrVKRo8eLc8//7yIiLRu3VpOnz4tdevWlUKFCsk///wjY8eOlejoaPn111/Fzc1N9u/fL5UrV5bHH39cunfvLvHx8ZmyfImJiRIYGChc/TYtZ7paJuCKnOnqX860PnP12/Rx9dv0cfXbrJVbch5Xv02P83zl4Oq36ePqt86Nq9+mz5nyL1e/TR9Xv3WU2Ve/dbqmnl1ycrKkpKSY45QcP35chg0bJvPmzZOjR49KSEiIxMfHyyOPPCJPPvmk+XfHjx+XAQMGyPz58yUxMVFKlSolffr0kS5dupjTzJkzRyZOnCh//PGHnD17ViIiIqRJkyYyZMgQiYiIEBGRq1eviqpKnjyZ+yFBU+/GnKkJALgiZwo1zrQ+09RLH0299NHUyx45PefR1EuP83zloKmXPpp6zo2mXvqcKf/S1EsfTT1Huaapl1PR1LsxZ2oCAK7ImUKNM63PNPXSR1MvfTT1cDdo6t2M83zloKmXPpp6zo2mXvqcKf/S1EsfTT1Hmd3Usz5tAAAAAAAAAMgQmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYmnoAAAAAAACAi6GpBwAAAAAAALgYD6sLyG1U1f4/Mf9rIXWGIgBkCtbn9NlsNqtLMCUnX7W6BNOVpMtWl2ByptfIGdYjew3OUAsyxv6aOc97mvdQepxp3XKmWuDcnOm9Qi3pS0lJtroEk/Nsh5zreXGGzaL9+cis966hzrQW5AL//vuvREVFWV0GAABwcgcPHpRChQpZXQYygJwHAABuR2blPJp62cxms8nhw4fF399fDMO44/kkJiZKVFSUHDx4UAICAjKxQtetxVnqoBZqoZacVYuz1EEtuacWVZVz585JgQIFxM2NkVJcCTkv59dBLdRCLTmrFmepg1pyTy2ZnfM4/Tabubm5Zepe94CAAMvf2HbOUouz1CFCLTdCLemjlvQ5Sy3OUocItdxITqolMDAwE6tBdiHn5Z46RKjlRqglfdSSPmepxVnqEKGWG8lJtWRmzmP3LwAAAAAAAOBiaOoBAAAAAAAALoamnovy8vKS1157Tby8vKwuxWlqcZY6qIVaqCVn1eIsdVALtSD3cKb3kbPU4ix1UAu1UEvOqsVZ6qAWarlTXCgDAAAAAAAAcDEcqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAAAAAAAC4GJp6AAAAAAAAgIuhqQcAOUxKSkq6t3NdJAAAANdGzgOQGle/BYAcJCUlRdzd3UVE5Pvvv5e8efNKWFiYlClTRkSuBT7DMKwsEQAAAHeAnAfgejT1ACAHatWqlSxZskQuX74s0dHR0rVrV3nllVdEhMAHAADgysh5AOw4/RYAcoDUp2K8+OKLsmnTJhkyZIjMnDlTypQpI2+88Yb07NlTREQMw+AUDQAAABdBzgNwIx5WFwAAuDuqap6KkZCQIAEBAdK9e3fp1auX+Pr6yv333y/jx4+XUaNGiYjIRx99ZAY+9uQCAAA4L3IegJuhqQcALs4e2J588kmZPHmyFCpUSEaPHi2+vr5is9kkOjpann/+eRGRXBf4cvryAQCAnI2cd2M5ffmA20FTDwByiDJlykj58uVl69atcuzYMRG5drqGm5ubREZGyvPPPy+GYcioUaMkOTlZJkyYkKODkH0w6TNnzsilS5dERKRAgQIWVwUAAJBx5DxH5DzgGi6UAQAuKPWeydT//+STT2T48OGSmJgoa9euldjYWElOThYPj2v7cI4cOSLvvfeevPvuu7J8+XKpXbt2jgx8NptN3NzcZOvWrfLII4/IkSNHxDAM6devn3Tv3l1CQkKsLhEAACBd5LybI+cB/6GpBwAuxr5n0u7ixYvi6+tr/j5p0iQZMmSIqKosW7YsTeA7dOiQ7N+/X6pXr57ttWeno0ePyn333ScFCxaUihUrSkJCgsyYMUO6dOkiAwYMkJIlS1pdIgAAgANy3u0h5wHXcPotALiQ1EFvwIAB8uuvv8quXbukYcOG0qxZM3nwwQfliSeeEBGRYcOGSYMGDWTp0qUOga9gwYJSsGBBEflvT2dOYV+epKQk2bRpk+TPn1/ef/99qVKliiQnJ0utWrXk6aeflsuXL8uQIUMIfAAAwGmQ826OnAekxZF6AOCCmjVrJr/88otUrlxZwsPDZe3atXLw4EF5++23pVevXiIiMmXKFBkyZIi4ubnJggULJC4uLlcMKLx//355+OGHJS4uTs6dOyfffvutiPwXBKdPny5du3aVdu3aEfgAAIDTIefdGDkPcMSRegDgYkaOHCmbNm2Sjz/+WBo2bCiBgYHy/vvvy4svvijbtm2Tc+fOib+/v3Tr1k0Mw5CBAwdK5cqV5d9//5WgoCCry89yFy5ckPPnz8uMGTOkfPnykpCQIIGBgeae6scff1xERLp27SoeHh4ycOBAiY2NtbJkAAAAESHn3Qo5D3BEUw8AXMzvv/8u99xzjzRv3lx8fHxk5cqV8sorr0iXLl2kf//+4u/vb56C0bVrV7l8+bJ4eXlJcHCw1aVnmdR7puPi4mTWrFnSt29fWbVqlSxYsEDatGkjXl5e5vSPP/64uLu7S8eOHSVPnjwybtw48fT0tKp8AAAAESHnpYecB9wYp98CIrniUHVXl5teo+PHj8ulS5ekSJEi5m32UwquXr0q9evXlyJFishnn30mK1askGbNmkmbNm3k7bfflsjISBERmTFjhhQrVkyqVavmMO+cOraKnX0smuTkZNm6dat0795dDh06JOPGjZPGjRs7BD4Rka+++krKli3LHlwAyMFyU4ZwVbnpNSLn3T5yHnBrOWeNB+5QSkqKGIYhmzdvlrVr11pdDtKRm16jiRMnSr169SQuLk4aNWokb775piQnJ5uBxsPDQ8LCwmT79u2ycOFCad68ubRu3VpGjRplBr1Vq1bJ0KFD5d9//5Xr99vkpKCXkpIibm5usm/fPnnjjTekS5cu0qdPH1m/fr14eHhIuXLlZMqUKVKgQAHp0aOHLFq0SJKSkhzm0a5dO4IeAORguSlDuKrc9BqR824fOQ+4TQpA9+zZo2FhYdqqVSs9efKk1eUgHbnhNZo5c6Z6e3trp06ddNq0afrAAw9oaGiorl+/XlVVbTabqqquW7dOAwMD1TAMfeyxx/TIkSPmPA4fPqwvvviili5dWn/55RdLliM7pKSkqKrqli1bNH/+/FqkSBGNiYnRIkWKqJeXlw4bNkxPnDihqqp//vmn3nvvvVqgQAGdN2+eXr582crSAQDZLDdkCFeXG14jct7tI+cBty/ntPKBDEpJSTH/P3v2bImJiZEBAwZISEiIhVUhtdzyGqmqnD59WiZOnCgPPvigvPnmm9KpUydp2rSptGnTRqpWrWqelqKqUrp0aenTp4/4+fnJ5cuX5ezZsyIi8tdff8kHH3wgY8eOlZ49e0rlypWtXbAs5ObmJsePH5dHH31UKlSoINOnT5ddu3bJ6tWrpWDBgjJhwgQ5cuSIiIiUK1dOJk+eLIULF5a2bdvK8uXLLa4eAJDVckuGcGW55TUi52UcOQ+4fVwoA7mWu7u77NixQ9577z3x8PCQ6tWrS9WqVUUkd43r4cxyy2tkGIa4u7vLrl27pGzZslKwYEEREdm0aZN5GoV9WQ3DkKCgIHniiSfEZrPJu+++K4sWLZLQ0FC5fPmyXL16VV5//XXp1auXiOSs5+l6u3fvlqNHj8rgwYPNMWU++OADOXLkiIwePVqio6PNaePj4+XDDz+Ufv36SYkSJSyqGLi51GMH2QdBB3BnckuGcGW55TUi590Zch5ymqzKeaTFXCa9N1JOG1D1dtlsNpk3b5588sknIiLSp08f8/bc+Hw4o9z0Grm5uYmfn59s375djh8/LuHh4eLj4yMbN26UlStXSlBQkFy6dEl2794tISEhUrZsWRkyZIg8/PDDMmXKFElMTJTY2FipUKGC1KtXT0Ry5vOU2t9//y0JCQnSrl07ERHp16+fjB49Wj7++GPp0KGD+Pr6SmJiohw9elRKliwpFStWlEWLFkmePHksrhxwlPoIjfPnz8u7774rFy9elE6dOkl8fLzV5cGFkPP+k5syhKvKTa8ROS/jyHnIKbI852X/Gb+wgn2MBpvNpufPn9e3335be/fu7TBGQ250+PBhff311zUsLEwrVqxojs1gf75gvdzwGtnHDZkxY4Z6eHjoM888o8nJybpz504tXry4Goahnp6eahiG5smTRw3D0PLly+uaNWtuOc+czD7mzIIFC3TAgAHq4eGhEyZM0IsXL5rTdOvWTStUqKDnzp2zsFIgres/w9atW6cvvviiFi5cWA3DUMMwdNGiRRZVB1dDzktfbsgQri43vEbkvDtDzoMry86cx5F6OZimOhzbMAz59ddf5fvvv5cvvvhCdu7cKV5eXtKyZUuJiIiwuNLskd7erMjISOnataukpKTIm2++KU888YR888034ubmlqMPZ3dWufU1si9zs2bNZNCgQTJ8+HAxDENGjhwpK1askE8++US8vLwkKipKoqOjZcOGDTJixAiZOHGilC1bVvz8/NI8Dzlpz+2N9kSHhYVJcHCwdO/eXc6ePSsTJkyQxx9/XDw9PUVE5Mcff5Rt27ZJzZo1zdsAZ2FfZ7/66itZunSpzJgxQ8LDw6VRo0Zy/Phx2bx5sxQuXNjiKuHMyHmOcmuGcCW59TUi590cOQ85UXbmPJp6OZj9jfTdd9/JkiVLZPLkyRIUFCQNGjSQgIAAuXTpksNYBDlZSkqKuLu7y5EjR2Tz5s2yf/9+KVWqlFSoUEEKFiwoTz75pIiIvP7669KuXTv5+uuvzUNkc0KYcAW8RiJBQUHy7LPPis1mkzfffFNERD788EMZNmyYw3Q1a9aU9evXy7p168TNzS3HLH967O+LgwcPypo1ayQ5OVmaNm0qfn5+Urx4cRkzZoy0bt1aihUrJgUKFDBD3dq1a2XUqFFy/Phxee6558TLy8viJcmd7K+fzWYTm83GGHH/79ixY7JkyRL55JNP5LfffpPg4GB588035cEHH5R8+fJJ8eLFpWfPnhIbG2t1qXBi5Lz/kCGcH68ROS895DzXRs5LX7bnvEw53g9O5+jRo/rNN99o/fr1NTg4WAsUKKBvvfWW7tixQ0+fPq1+fn76xhtvWF1mtrAfnv73339r0aJFzUvE+/n56T333KO7d+9WVdVjx47p0KFD1d3dXR966CGHU1mQtXLra3SjUycOHjyogwcPVjc3N3322Wc1ISHBYRmPHTumrVu31kaNGumZM2eyqdr/ZPcpH3///bfmz59f3dzc1DAMLVmypH700UfmqRbTpk1Td3d3LVCggD700EParFkzjY2N1fDwcP3zzz+ztVb8Jzk5WVVVd+7cqT169NDWrVvr1KlTdfv27RZXZq2ff/5Zvby8NDAwUKtUqaIzZ87Uffv2qarq1atX9aWXXtJChQrpli1bVNV1P9+Qtch5/8mtGcKV5NbXiJx3e8h5romclz4rch5NvRwmJSVFly1bpjExMerr66tly5bVCRMmmBvLq1ev6vPPP6+FCxfWPXv2qKrrbigz4p9//tHChQtro0aN9JtvvtFz587p+PHj1TAMrVixornBPH78uA4dOlR9fHy0QYMGueK5cRa57TW6evWq+f8dO3bo+vXrzQ931WtjzNgDX48ePTQxMVFVVf/8808dOnSoenl56SeffJLtdds34P/++6/OmjVL58+fr4cPH870x7EHykuXLmndunW1cePG+tVXX+nGjRu1atWqmj9/fn311VfNwLdq1Sp9/PHHNT4+XitXrqzPP/+87tq1K9PrQsZs375dQ0JCNCQkRAsVKqSGYWjjxo112bJlVpdmmRMnTujgwYN1xowZae47f/68lipVStu0aeOyn23IWuS89OW2DOGKcttrRM67OXJezkDOS8uKnEdTLwdauHCh9u/fX6dOnZrmvjNnzmhMTIy2b98++wuz0Pjx4zU6OlqXLVtmbqxefPFFDQgI0PHjx+v58+fNaY8cOaIvvfSShoaG6sGDB60qOdfJTa+RfflUVR977DFzwNSQkBBt0aKFHj16VFWvHYlhD3zPPPOM7tu3T+vWrauGYeiIESPMeWR34N2yZYtGRESou7u7OZjzuHHj7mqe6e0VPnTokC5ZskTvu+8+/eabb8zbk5KStEWLFhoREaGvvvqqGYSvXr3q8nv1cwL7+zs5OVmHDx+ujRs31vXr12tKSorOnj1bQ0JC9P7779cffvjB4kqdQ+rPgxEjRqivr69u3rxZVXPHQOjIOHJeWrkpQ7iq3PQakfPSIuflHOS8jMmOnEdTL4e6cuWK+f/Ub6ShQ4eqr6+vbtu2TVVzzxeG7t27a+nSpc3f+/btqx4eHjpx4kRzD9CZM2fMjcbx48fNq28he+TG16hNmzZmYFmwYIG+8cYb6uHhoVWqVDED35EjR/SVV17RPHny6Msvv6xLlizRWbNmmfPIrnU49R7VqlWrasOGDXXWrFn6448/6j333KPFihXTYcOG3dG8T58+7fC7zWbTs2fPakBAgMbGxmqZMmXMzzT7Fc8uX76szZs3N58/+5cBe52EPWvt3LlTR40apTVr1tRXXnnF4b6FCxdqwYIFc1XgO3z4sH799dc3PNrBZrPpyZMn9YEHHtD69evryZMns7lCuBpynqPcmCFcTW58jch515Dzch5yniOrcx5NvRzi8OHDunLlyptu/I4cOaJVqlTR5s2b69mzZ7OxuuyRnJzssOE7c+aMuZyDBw/WcuXK6YULF7Rfv35miEh9SfSuXbvqyy+/7BCOkX2c6TW6PijcTXBIvec5tUWLFmn+/Pl18uTJmpCQoKqqCxYs0Dx58mjnzp3NsKd6bU/mgAED1DAMXbdunXl7dgU9+/IfOnRI16xZo/Xr19cFCxaY9+/atUubN2+uUVFRGQ58LVq00ObNm2tSUlKa+z744APzku+zZ882b7cHP3vgi4qK0n79+umFCxfuZPGQBVq2bKmGYWixYsX0xx9/VNVre97t76XUgW/hwoVWlprltm7dqvHx8Vq+fHl9++23bzjd999/r4Zh6FdffZWN1cFVkPPIea7OmV4jcp4jch4yipz3H2fIeTT1coCtW7dq+fLltXjx4vrdd9/dcLqvv/5aDcPQefPmZWN12ePixYv67rvvmufvb9myRcuUKaOLFy9WVdXZs2erYRhar149c4yK1CFi3rx5Wrp0af3www9zzV5tq9zo+bW/P61+jexB8vz583c9OPGnn36qjz32mDnWUWpjx47VfPnymV9Ili9frr6+vvr444+ne6rJwYMHde3atXdVz904efKkFi5cWOPj4zUmJsbck24PaXv37tVmzZplOPCNGTNGFyxY4BD2Uo9DM336dDUMQ6tVq+YQdO3TJyUlaY0aNbRUqVIuv0c/p2nevLkahqHNmjXTU6dOqeq19St14IuOjtbY2FhdsmSJlaVmmR07dmj+/Pm1fv366W6f7c/FqVOntFq1alqtWjXziBXAjpxHznMl5LxryHnXkPNyLnKe8+Q8mnoubvv27RoaGqqNGzfWzz777IbTnT59Wu+//36tVq2awwY0p9i/f7+WK1dOS5QooRMnTtTAwECtVauWefqJqurTTz+thmFo+/btHfaObdq0SRs3bqzlypXTAwcOWFF+rmEPUidOnNDt27c7DBisqvrkk09a+hrZQ+TWrVv1/vvv1+joaK1atap+9913d3TUw8iRI9UwDIe9nXbjx4/X0NBQTUpK0p9//ll9fX21Q4cODodtv//++/r888/fsM7s1qdPH/X391fDMHTlypWqem1jZX9d9+7dq82bN9dixYpp//79bzqvtm3b6ty5c1X1v+B26dIlTUlJSXOaxoQJE9QwDG3YsKGuX7/evN2+JzcpKYl110I3ez82atRIDcPQV1991fzylDrwzZ07V+Pi4syrguUkFy9e1NatW+s999yjGzduTHOf/QuT6rX3cvPmzbVXr17ZXSacHDnvGnKeayDn/YecR87LKch56XOmnEdTz4WdO3dOmzRpojVr1tRNmzY53Hfx4kWHFXD//v3aoEEDHTlyZLbVl3og0+wY92Dn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8onGxMRo9erVbxj4Jk2alKVBZ/r06RofH69BQUH6448/qqpqs2bNtEGDBvrjjz/qtm3btGfPnurr66utWrVy+Nv58+drYGCgli1bVteuXXvLxxo+fLi+/vrr2rx5c4cQ+8cff+hDDz2kwcHB+s477zj8zciRI3X06NGZsKQZk5Xr8LRp09QwDG3evLl5m/1LT5EiRbRSpUoaFhamISEh5qDqFy5c0JdfflkjIyM1T548GhwcrPnz59cCBQqkGUfJCqm/QCYkJGhERITec889+v777+f4wGd35swZbdmypUZHR2vv3r3N52T+/PlaqFAhDQ0N1cGDB+uqVat05MiRWq1aNQ0JCcnxg10/+eSTGh4eridPnlRVx8/yf/75R6OiorRVq1Z6/vx5q0qEkyPn/Yec51rIedeQ88h5OQE5L32ukPNo6jm5y5cva/v27TU8PNxhTAb7m+nUqVMaERGhXbt2zbaa7I+9a9cu7datm3bu3FlHjRplduj37NmjDz74oPr6+mrXrl313Llzev78ef3uu++0fv36mj9//js+HPXYsWPasmVL9ff31ylTpjh0zO17csuUKaPbtm3TLVu2aIsWLTQqKkoTEhIs+SA+efKkFihQQJ999tk0982dO1ejoqI0MDDQ/DDM6sB3/akTmTU4783mM378eI2JidFq1ao5jDmwd+9ebd26tRqGoZ9++mmmvz6p5/fNN99oXFycBgQE6E8//aRdu3bVzz77zLz/+PHjOnLkSPX09EwT+L755hstWLCg7tu376aPN336dDUMQyMjI7Vbt26q6jim0J9//mkGvnffffeWNWelrF6HT548qf3791dvb2/zKngTJ07UmjVr6i+//KKq18Yeatq0qcOVG5OSkvTXX3/VESNGaI8ePfT999+/5fOeHVKvl926ddMnnnhCQ0ND1cfHR0NDQ3XMmDE5NvDZl8f+HJw5c0Y7duyoBQsW1F69eplfFpYsWaIPPvigOR5YWFiY1qlTJ8cHPdVrpw55e3tr586dzecj9VhRFSpU0KZNm1pVHpwcOc8ROe/ukPPIearkvIwi55HzbsYVch5NPSd07tw5hz2wkydPNgedvX5Q2StXrmhsbKw2a9YsW2vcvn27hoSEmHtY/Pz8ND4+3jwff/v27fr444+rp6enBgUFaUhIiEZERGhMTMxdj3Vy9OhR7dixo3p5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rVy5snbt2lWfe+45DQsLU19fXx08eLA53VdffWWOL7JkyZLbmvfKlSu1SJEiOm7cOPN1/f3339XDw0N79uyphw8fdggMffr0UcMwHL7IZZfsXof37NljHimwaNEi8/brB1W+PvBdv05bJfX7c9++fbp3715z77uq6qpVqzQ2NlYjIyN19erV5jp06NAhfeKJJ3TYsGF66tQpDQwMzNRBylObOnWqNmzYUP/66y89ffq0rlixQqOjo7VYsWI6e/bsO1rHUl9lU1X1+++/V39/f/PzqW/fvmnW6+TkZF2yZIn5HsvMPcjOIvVzef/99+vjjz+uqte+xF3/fNhsNm3QoIHDHm9AlZyXGjkva5HzyHnkvJsj55HzUstJOY+mnoWWLFmi33zzjapeuzpURESEhoeHa0xMjLq7u2vjxo31888/17Nnz2rz5s21dOnSWTYex41cunRJS5UqpSVLltS1a9eaXektW7aYG4uBAwea06f+0L5+7JObSX1+f5EiRdTDw0O9vb31oYceMq9qNnbsWM2TJ4+2a9dODx06pCkpKbp582atVauWjho1ypKO+bZt2/Sxxx7Txo0ba/v27R2W5eLFi9qsWTONiIhwCHxZ5foxLq5cuZJmI2q/KpeHh4eOHz/+lh/QqZ/TCRMmaExMjN5zzz0Oe/V+/fVXDQoK0rJly5qHKKfeQ7ts2TItUaKEvvXWW9lyVaDLly/ro48+qqVLl3Y4hPqXX37Rpk2bqru7uzmQr6rqN998o5GRkRoVFaUXL1685ftoypQp6uPjY56ysGzZMvX19dX27ds77KW1j7Giem3wXatk5zrcp08fjYqKchjL5/oBhe2BL2/evFqtWrW7WrbMlPq92b17dy1ZsqR56tv06dNV9dqyzJkzR8uUKaMBAQHasWNHfeWVV7RNmzbq5eWlH374oaqq9urVS/38/HTXrl13/bl0/TozevRofeSRRxxu27JlixYrVuyOAl/q90OdOnV03bp1unXrVnV3d9fPP/9c33rrLfXw8NAJEyY4fIF79tlntWbNmg5X8MxJUm+f7adlxMbG6mOPPaYeHh46efJkh/Vj1qxZGhUVpV9//bVVJcMJkfP+Q867e+S8a8h5jsh5t4ecR85LLaflPJp6FklISNCYmBht3Lix+Yb5448/tGvXrtqmTRv95ptvHA5j79evn0ZHR5vjXWS1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eY2Li1M3Nzd9/vnn9eTJk7px40YNDw9Pc3j3tm3b9N9//73tx0u9x+Gee+7R0NBQveeee7Rw4cLmFbtSb0SnTZum0dHRWrp0aYfLyVvh0qVLOmbMGA0LC9N7773XfA4++OAD81LuqT+Er9+blRkeeeQRffrpp1X12nuldevW6ufnpz169ND69es7HGKvem3cgIoVK2pcXJx++eWX5u2///67du7c2Rx4+sEHH9TXX389zeNt27ZNPT09dfPmzeZt48ePTxP4rly5oklJSbpt2zY9e/Zslobx1FfhKlWqlMbExOi4ceNU9dppKYULF9YqVaro5s2bHTbqCxcu1KCgIJ0yZcpN56t67YpvrVq10lKlSpl78VatWqWnT5/WVq1aqWEY+sQTT+j333+vX375pXbo0EE9PT317bffzrLlvpHsWodv9rzv3btXixQpolWqVNE//vjD4Xn/9ddftW7dutq+ffssOT3pdtlsNl2+fLlDsGnfvr1u3bpV33nnHf31119V9dqe04CAAH300Uf1xIkTunHjRvM0hetf3+TkZJ05c6aWLFlS4+PjM/x5/cgjj2jv3r0dbtu5c6f269dP69atq6+++qrDffYvl9d/1ly/1z611atXq2EYOmrUKFW9to60a9dOO3furDExMZovXz7zy1Lqz97ffvtN33vvPW3QoIG2aNFChw0bluGrXbqS29k+Hz58WH/77Tf94osvdPPmzVl2dVK4LnIeOe9ukfPIedcj590ech4572Zyas6jqWeB1157TX19fdPt8P/7779m2FmzZo156Gd2OHHihFasWNE831712lVyypYtqyEhIbpp0yZVvTYQbXh4uFavXl1XrlyZ4QFC7dMfOXJES5QooRUrVtTnnntO77//fjUMw2GshtQfOtOnT9fAwECtWLFith/ubq/ZvuJfvHhRJ0yYoEFBQTcMfPYPzsx28eJFbd++vQYEBJiHuF+5ckUffPBBDQ0N1QIFCui3336rqmpeVU7VMfDNmjXLvN2+YThz5ozWq1dPDcPQ0aNHm/enpKTounXr1MPDw3w8u9SBLzuv8Ga3a9cuDQ8P1yZNmujcuXPN25OTk3XWrFkaGRmp8fHx+tFHH+mBAwf0m2++0YYNG2pUVNQtx35p06aNRkRE6NChQ3XlypU6YsQILV68uBqGoT/99JMmJibqiy++qHnz5lUP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LVu2aIcOHdTNzU07deqk06dP16FDh2rNmjU1ODhY//rrrxytL7/3/WCb/61bt2qZMmXUx8dHPTw8tF+/fvr333+r6rWQ9dBDD1n2GamqHjp0SENDQ7Vy5cr60EMPac2aNdXb21tfeeUVuwCaWWk38idOnDD/v2jRIvXx8dGBAweqr6+vdunSRY8cOWI+/9dff2m9evW0X79+lv1As31maftueuWVV8wjqrZOXtMGvgMHDuh9992nFSpUuOERVduPsxUrVpjT3r17t3bt2lVr1KihFStW1KFDh+pvv/1mvmbKlClqGIY2adJEN27caA5PWxtyn+1zP3HihK5fv16//PJL3b9/v913tn79+urq6qqjRo0yfzSlDXw3unTJ2Z0+fVrLlSunffr0MYf99NNPOnr0aK1QoYJWrFhRP//8c/O5tGeM5Pf9Ba4h59kj5zk2ch45z4acl3eQ827MkXIejXpO7Ny5c1qyZEkdMGCAOWz9+vU6fvx4LV++vLZp08buVuhpj3zkZPCwrfyJiYmanJyc7mhMdkpJSTFP4T5z5ox6eHioYRhaunRp/fbbb9ONf+jQIR05cqQWLFhQXVxctHDhwtqqVSvdvn17jtWoqubRifzej8uJEye0bNmyWq9ePX3hhRd0yJAh6uXlpU2aNNHff/9dVa/1CTRixAgtWLCgurq65spnZPtcLl++rJ9++qnWq1fP/LGQkpKi3bp1U8MwdOTIkbcV+FRV27Rpow8//LDdkap27dqpYRh6zz336K5du8zh//77r44YMUKLFCliyWVUt1qHn3/+efX29tbmzZubATxt4Dt48OANj6jafoSeP39eL1++rKqqO3bs0JCQEC1btqzGxcVpnTp11M3NTWNjY3XOnDnma6dOnaqGYWjz5s31xx9/zN6ZRpbZPstt27ZppUqVNCAgQN3c3NTPz0+HDRtm90OnYcOG6uLiki7wqebdH8IXL17UBg0aaPny5XXTpk06ZswYLVasmIaFhWmzZs20WrVq6uXlpb/++qvd6/Lq8kDWkfPIec6GnEfOI+flHeS8m3OknEejnhP7559/tFChQtq+fXvdsGGDvv7661q2bFkNCQnRJk2aaHh4uJYsWdIu5KnmTtDbuXOntmnTRsuWLavh4eE6YMAA/f7777PtfRITE+2Ohm3btk0/+ugj/eabb3Tu3LlavHhxjY2N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H3V3d9fBgwebd247deqU+vn56ciRI7M83dOnT2vVqlW1RIkSunz5cnO4bQf75ptvavXq1bVRo0YaGhqqGzduzJ4ZukO5tQ7n1HLPTVevXtVz587prFmztGDBglqrVi27TpWvXr2qP/zwgw4cOFCffvpp/eyzz8zncnJHn5X12fZ9zEo9tm3An3/+qZUrVzb7ckkb+Bxp25tbHH3/DOfg6N8jct6NkfPIearkPBtyHjkvr3H0/fOdolEvF3311VcaFhamtWvX1nfeeUfPnDljrqSOct32L7/8ogEBARoREWG3cfv+++81Li5Oo6Kisq0/jaNHj5pHCdP262HbOZ09e1bHjBljeYerNvv27dO6deumC3yq1y7DqF27ts6cOVN3796d67XFx8ffcAcRFBSkXbt2tetnI7OOHTumHTt2VA8PD61WrZrOnTtXJ0yYoKNGjdKRI0fqkCFDtE+fPpbe9vzo0aO6YcMGPXTokN0lI2vXrtXixYvre++9Zw7Lik2bNqm3t7fWqlVLv/76a3P4sWPHtEePHjp06FBdsmSJRkREaPfu3XP1cpSbya11OKeWe247f/68vv/++xocHGwX+C5cuKBTp05N169Kbmyrc2p9Tis1NVV/++0380hu2sB35swZh9r25gZn2D/D8TnD94icd2PkPHKeKjnPhpyXc8h5uc8Z9s93gka9XJSUlKR79uxJd9ccR9sYrlixQv39/TUoKEgbNGigDRo00NKlS2t4eHi279TTnv6fUeBztGWzd+9erVu3rgYFBemcOXM0JSVFN2zYoC1atNBBgwZZeuegG+0gGjZsqEWLFrU7OpUV//77r3bq1EkNw9APP/wwO0vOMT/88IO2bNlSS5QocUf93XzzzTdmvxRPPPGETps2TTt27Khubm768ccfq6rqI488ohEREXr+/PnsKv+O5eY6nFZ2LffcduHCBZ0xY4YGBwfr3XffrR9//LEOHz5cDcPQt99+25Kacmp9vl7awPfNN9+YZ2I42rY3K25nO+ws+2c4Nmf5HpHzboycR84j590YOS/7kPPuTFa3xc6yf75dNOpZyJG/RDt37tQBAwbovffeq3Xr1tVhw4blWD8aaQOfVRvWrDh48KC2bt1aDcPQiIgIDQ4O1oIFC+rWrVutLs1uBzF69GhVvXYa9uHDh+9oukePHjXvuGbrVFn12nfYkb7H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S8OHD9ehQ4f8lhk1apSqVq2qvXv3qlevXqpWrZqGDRsmSdqzZ4/uuece1a1bV+Hh4WrQoIEGDx4sl8tVwlcRAAAg+DDnMecBAABrCC3pA3bs2KHbb79d0dHReuyxx1SlShW9+OKL6tKli7Zu3apOnToVe11z587VpEmTVLVqVT3++OOSpDp16kiSjhw5ojvvvFN5eXmaNm2aoqKi9NJLLykiIqLQelJSUpSamqpu3brpoYce0u7du7VgwQJ9+eWX2rZtm6pUqSLpwrA5evRodezYUWlpaTp69KjmzZunbdu26euvv1ZMTIyxzry8PCUkJOi2227Ts88+q8jISJ07d04JCQnyeDyaNGmS6tatq0OHDum9995TTk6OnE5nSV9OAACAoMGcx5wHAACso8Sl3hNPPKHz58/r73//u6699lpJUmJiolq0aKHHHntMW7duLfa6+vXrpyeeeMJ4J/Vis2bNUlZWlr744gv96le/kiSNHDlS8fHxfstlZWUpLS1N3bt314YNGxQScmHnw5YtW2rixIlasWKFRo8erfPnz+v3v/+92rZtq08++UTh4eGSpNtuu01333235syZo9TUVGO9Ho9HAwcOVFpamnHbN998o3379unNN9/Uvffea9w+Y8aMS26jx+ORx+Mxrrvd7mK/PgAAAOWJOY85DwAAWEeJPn6bn5+vDz/8UP369TMGPUmqV6+ehg4dqr///e8BG2bWr1+vm266yRj0JCk2Ntb4eESBzZs369y5c0pKSjIGPUl68MEHFR0drffff1+S9K9//UvHjh3T+PHjjUFPknr37q2WLVsay13soYce8rte8A7txo0bdebMmWJtR1pampxOp3GJi4sr1uMAAADKE3Mecx4AALCWEpV6WVlZOnPmjFq0aFHovlatWsnr9ergwYMBCbZ///5C79ZKKvTc+/fvL/L2sLAwXXvttcb9l1pOuvBub8H9BUJDQ9WgQQO/25o0aaIpU6Zo0aJFqlWrlhISEvSXv/zlssdZSU5OlsvlMi6Ben0AAAACiTmPOQ8AAFhLmZz9tqiDJ0sX3gG2CofD4feOcIHnnntO3377raZPn67c3Fz97ne/U5s2bfTTTz9dcj3R0dF+FwAAAKtizvNfD3MeAAAwS4lKvdjYWEVGRmr37t2F7tu1a5dCQkIUFxen6tWrS1Khs5L977uk0qUHw0aN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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t07uJBHB0Voo"
      },
      "source": [
        "#### <b>BLEU Score 계산</b>\n",
        "\n",
        "* 학습된 트랜스포머(Transformer) 모델의 BLEU 스코어 계산"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C7hsjkOKb3HS"
      },
      "source": [
        "from torchtext.data.metrics import bleu_score\n",
        "\n",
        "def show_bleu(data, src_field, trg_field, model, device, max_len=50):\n",
        "    trgs = []\n",
        "    pred_trgs = []\n",
        "    index = 0\n",
        "\n",
        "    for datum in data:\n",
        "        src = vars(datum)['src']\n",
        "        trg = vars(datum)['trg']\n",
        "\n",
        "        pred_trg, _ = translate_sentence(src, src_field, trg_field, model, device, max_len, logging=False)\n",
        "\n",
        "        # 마지막 <eos> 토큰 제거\n",
        "        pred_trg = pred_trg[:-1]\n",
        "\n",
        "        pred_trgs.append(pred_trg)\n",
        "        trgs.append([trg])\n",
        "\n",
        "        index += 1\n",
        "        if (index + 1) % 100 == 0:\n",
        "            print(f\"[{index + 1}/{len(data)}]\")\n",
        "            print(f\"예측: {pred_trg}\")\n",
        "            print(f\"정답: {trg}\")\n",
        "\n",
        "    bleu = bleu_score(pred_trgs, trgs, max_n=4, weights=[0.25, 0.25, 0.25, 0.25])\n",
        "    print(f'Total BLEU Score = {bleu*100:.2f}')\n",
        "\n",
        "    individual_bleu1_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1, 0, 0, 0])\n",
        "    individual_bleu2_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 1, 0, 0])\n",
        "    individual_bleu3_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 0, 1, 0])\n",
        "    individual_bleu4_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 0, 0, 1])\n",
        "\n",
        "    print(f'Individual BLEU1 score = {individual_bleu1_score*100:.2f}')\n",
        "    print(f'Individual BLEU2 score = {individual_bleu2_score*100:.2f}')\n",
        "    print(f'Individual BLEU3 score = {individual_bleu3_score*100:.2f}')\n",
        "    print(f'Individual BLEU4 score = {individual_bleu4_score*100:.2f}')\n",
        "\n",
        "    cumulative_bleu1_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1, 0, 0, 0])\n",
        "    cumulative_bleu2_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/2, 1/2, 0, 0])\n",
        "    cumulative_bleu3_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/3, 1/3, 1/3, 0])\n",
        "    cumulative_bleu4_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/4, 1/4, 1/4, 1/4])\n",
        "\n",
        "    print(f'Cumulative BLEU1 score = {cumulative_bleu1_score*100:.2f}')\n",
        "    print(f'Cumulative BLEU2 score = {cumulative_bleu2_score*100:.2f}')\n",
        "    print(f'Cumulative BLEU3 score = {cumulative_bleu3_score*100:.2f}')\n",
        "    print(f'Cumulative BLEU4 score = {cumulative_bleu4_score*100:.2f}') # BLEU4 score가 일반적으로 알려져 있는 블류 스코어"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XXM8yzc8ZtgE",
        "outputId": "a3423779-d0b2-4654-fd17-d78b303ca4cc"
      },
      "source": [
        "show_bleu(test_dataset, SRC, TRG, model, device)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[100/1000]\n",
            "예측: ['a', 'group', 'of', 'asian', 'children', 'are', 'sitting', 'in', 'blue', 'chairs', 'chairs', '.']\n",
            "정답: ['a', 'group', 'of', 'mostly', 'asian', 'children', 'sitting', 'at', 'cubicles', 'in', 'blue', 'chairs', '.']\n",
            "[200/1000]\n",
            "예측: ['all', 'the', 'group', 'of', 'people', 'are', 'standing', 'under', 'umbrellas', '.']\n",
            "정답: ['the', 'group', 'of', 'people', 'are', 'all', 'covered', 'by', 'umbrellas', '.']\n",
            "[300/1000]\n",
            "예측: ['a', 'male', 'player', 'in', 'a', 'yellow', 'jersey', 'is', 'throwing', 'the', 'gate', '.']\n",
            "정답: ['a', 'goalie', 'in', 'a', 'yellow', 'field', 'is', 'protecting', 'the', 'goal', '.']\n",
            "[400/1000]\n",
            "예측: ['two', 'young', 'children', 'on', 'the', 'sand', '.']\n",
            "정답: ['two', 'young', 'children', 'are', 'on', 'sand', '.']\n",
            "[500/1000]\n",
            "예측: ['two', 'medium', '-', 'haired', 'dogs', 'running', 'across', 'the', 'snow', '.']\n",
            "정답: ['two', 'medium', 'sized', 'dogs', 'run', 'across', 'the', 'snow', '.']\n",
            "[600/1000]\n",
            "예측: ['a', 'group', 'of', 'men', 'sit', 'and', 'talk', 'behind', 'green', '<unk>', '.']\n",
            "정답: ['a', 'group', 'of', 'men', 'sitting', 'and', 'talking', 'behind', 'some', 'green', 'fruit', '.']\n",
            "[700/1000]\n",
            "예측: ['two', 'people', 'look', 'at', 'the', 'night', 'at', 'a', 'city', '.']\n",
            "정답: ['two', 'people', 'look', 'on', 'in', 'the', 'nighttime', 'at', 'the', 'lights', 'in', 'a', 'city', '.']\n",
            "[800/1000]\n",
            "예측: ['<unk>', 'all', 'the', 'bicycle', 'is', 'all', 'all', 'riding', '.']\n",
            "정답: ['crowds', 'of', 'people', 'are', 'all', 'riding', 'bicycles', '.']\n",
            "[900/1000]\n",
            "예측: ['children', 'fight', 'for', 'the', 'ball', '.']\n",
            "정답: ['kids', 'compete', 'to', 'gain', 'possession', 'of', 'the', 'soccer', 'ball', '.']\n",
            "[1000/1000]\n",
            "예측: ['an', 'older', 'man', 'is', 'playing', 'a', 'video', 'game', '.']\n",
            "정답: ['an', 'older', 'man', 'is', 'playing', 'a', 'video', 'arcade', 'game', '.']\n",
            "Total BLEU Score = 35.52\n",
            "Individual BLEU1 score = 67.59\n",
            "Individual BLEU2 score = 43.01\n",
            "Individual BLEU3 score = 28.24\n",
            "Individual BLEU4 score = 19.37\n",
            "Cumulative BLEU1 score = 67.59\n",
            "Cumulative BLEU2 score = 53.92\n",
            "Cumulative BLEU3 score = 43.47\n",
            "Cumulative BLEU4 score = 35.52\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CT_dDFyEbtuf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
